rnorm (1, mean(theta), tau/sqrt(J))
}
tau_update <- function (){
sqrt(rigamma(1, (J-1)/2, sum((theta-mu)^2)/2))
}
chains <- 5
iter <- 600
sims <- array (NA, c(iter, chains, J+2))
dimnames (sims) <- list (NULL, NULL,
c (paste ("theta[", 1:8, "]", sep=""), "mu", "tau"))
for (m in 1:chains){
mu <- rnorm (1, mean(y), sd(y))
tau <- runif (1, 0, sd(y))
for (t in 1:iter){
theta <- theta_update ()
mu <- mu_update ()
tau <- tau_update ()
sims[t,m,] <- c (theta, mu, tau)
}
}
monitor(sims)
library(rstan)
library(pscl)
schools <- list(estimate = c(28, 8, -3, 7, -1, 1, 18, 12),
est_sd = c(15, 10, 16, 11, 9, 11, 10, 18),
name = c("A", "B", "C", "D", "E", "F", "G", "H"))
J <- length(schools$estimate)
y <- schools$estimate
sigma <- schools$est_sd
theta_update <- function (){
theta_hat <- (mu/tau^2 + y/sigma^2)/(1/tau^2 + 1/sigma^2)
V_theta <- 1/(1/tau^2 + 1/sigma^2)
rnorm (J, theta_hat, sqrt(V_theta))
}
mu_update <- function (){
rnorm (1, mean(theta), tau/sqrt(J))
}
tau_update <- function (){
sqrt(rigamma(1, (J-1)/2, sum((theta-mu)^2)/2))
}
chains <- 5
iter <- 300
sims <- array (NA, c(iter, chains, J+2))
dimnames (sims) <- list (NULL, NULL,
c (paste ("theta[", 1:8, "]", sep=""), "mu", "tau"))
for (m in 1:chains){
mu <- rnorm (1, mean(y), sd(y))
tau <- runif (1, 0, sd(y))
for (t in 1:iter){
theta <- theta_update ()
mu <- mu_update ()
tau <- tau_update ()
sims[t,m,] <- c (theta, mu, tau)
}
}
monitor(sims)
library(rstan)
library(pscl)
schools <- list(estimate = c(28, 8, -3, 7, -1, 1, 18, 12),
est_sd = c(15, 10, 16, 11, 9, 11, 10, 18),
name = c("A", "B", "C", "D", "E", "F", "G", "H"))
J <- length(schools$estimate)
y <- schools$estimate
sigma <- schools$est_sd
theta_update <- function (){
theta_hat <- (mu/tau^2 + y/sigma^2)/(1/tau^2 + 1/sigma^2)
V_theta <- 1/(1/tau^2 + 1/sigma^2)
rnorm (J, theta_hat, sqrt(V_theta))
}
mu_update <- function (){
rnorm (1, mean(theta), tau/sqrt(J))
}
tau_update <- function (){
sqrt(rigamma(1, (J-1)/2, sum((theta-mu)^2)/2))
}
chains <- 5
iter <- 100
sims <- array (NA, c(iter, chains, J+2))
dimnames (sims) <- list (NULL, NULL,
c (paste ("theta[", 1:8, "]", sep=""), "mu", "tau"))
for (m in 1:chains){
mu <- rnorm (1, mean(y), sd(y))
tau <- runif (1, 0, sd(y))
for (t in 1:iter){
theta <- theta_update ()
mu <- mu_update ()
tau <- tau_update ()
sims[t,m,] <- c (theta, mu, tau)
}
}
monitor(sims)
library(rstan)
library(pscl)
schools <- list(estimate = c(28, 8, -3, 7, -1, 1, 18, 12),
est_sd = c(15, 10, 16, 11, 9, 11, 10, 18),
name = c("A", "B", "C", "D", "E", "F", "G", "H"))
J <- length(schools$estimate)
y <- schools$estimate
sigma <- schools$est_sd
theta_update <- function (){
theta_hat <- (mu/tau^2 + y/sigma^2)/(1/tau^2 + 1/sigma^2)
V_theta <- 1/(1/tau^2 + 1/sigma^2)
rnorm (J, theta_hat, sqrt(V_theta))
}
mu_update <- function (){
rnorm (1, mean(theta), tau/sqrt(J))
}
tau_update <- function (){
sqrt(rigamma(1, (J-1)/2, sum((theta-mu)^2)/2))
}
chains <- 5
iter <- 10
sims <- array (NA, c(iter, chains, J+2))
dimnames (sims) <- list (NULL, NULL,
c (paste ("theta[", 1:8, "]", sep=""), "mu", "tau"))
for (m in 1:chains){
mu <- rnorm (1, mean(y), sd(y))
tau <- runif (1, 0, sd(y))
for (t in 1:iter){
theta <- theta_update ()
mu <- mu_update ()
tau <- tau_update ()
sims[t,m,] <- c (theta, mu, tau)
}
}
monitor(sims)
library(rstan)
library(pscl)
schools <- list(estimate = c(28, 8, -3, 7, -1, 1, 18, 12),
est_sd = c(15, 10, 16, 11, 9, 11, 10, 18),
name = c("A", "B", "C", "D", "E", "F", "G", "H"))
J <- length(schools$estimate)
y <- schools$estimate
sigma <- schools$est_sd
theta_update <- function (){
theta_hat <- (mu/tau^2 + y/sigma^2)/(1/tau^2 + 1/sigma^2)
V_theta <- 1/(1/tau^2 + 1/sigma^2)
rnorm (J, theta_hat, sqrt(V_theta))
}
mu_update <- function (){
rnorm (1, mean(theta), tau/sqrt(J))
}
tau_update <- function (){
sqrt(rigamma(1, (J-1)/2, sum((theta-mu)^2)/2))
}
chains <- 5
iter <- 1000
sims <- array (NA, c(iter, chains, J+2))
dimnames (sims) <- list (NULL, NULL,
c (paste ("theta[", 1:8, "]", sep=""), "mu", "tau"))
for (m in 1:chains){
mu <- rnorm (1, mean(y), sd(y))
tau <- runif (1, 0, sd(y))
for (t in 1:iter){
theta <- theta_update ()
mu <- mu_update ()
tau <- tau_update ()
sims[t,m,] <- c (theta, mu, tau)
}
}
library(rstan)
library(pscl)
schools <- list(estimate = c(28, 8, -3, 7, -1, 1, 18, 12),
est_sd = c(15, 10, 16, 11, 9, 11, 10, 18),
name = c("A", "B", "C", "D", "E", "F", "G", "H"))
J <- length(schools$estimate)
y <- schools$estimate
sigma <- schools$est_sd
theta_update <- function (){
theta_hat <- (mu/tau^2 + y/sigma^2)/(1/tau^2 + 1/sigma^2)
V_theta <- 1/(1/tau^2 + 1/sigma^2)
rnorm (J, theta_hat, sqrt(V_theta))
}
mu_update <- function (){
rnorm (1, mean(theta), tau/sqrt(J))
}
tau_update <- function (){
sqrt(rigamma(1, (J-1)/2, sum((theta-mu)^2)/2))
}
chains <- 5
iter <- 1000
sims <- array (NA, c(iter, chains, J+2))
dimnames (sims) <- list (NULL, NULL,
c (paste ("theta[", 1:8, "]", sep=""), "mu", "tau"))
for (m in 1:chains){
mu <- rnorm (1, mean(y), sd(y))
tau <- runif (1, 0, sd(y))
for (t in 1:iter){
theta <- theta_update ()
mu <- mu_update ()
tau <- tau_update ()
sims[t,m,] <- c (theta, mu, tau)
}
}
monitor(sims)
hist(sims[, 1, 10])
hist(sims[, 2, 10])
hist(sims[, 3, 10])
hist(sims[, 4, 10])
hist(sims[, 5, 10])
hist(sims[, 5, 1])
?pushViewport
?labs
p_mu <- ggplot(aes(x = sims[501:1000, 1, 9]))
p_mu + geom_histogram() + stat_density()
p_mu <- ggplot(data = NULL, mapping = aes(x = sims[501:1000, 1, 9]))
p_mu + geom_histogram() + stat_density()
p_mu +stat_density()
?stat_density
p_mu + geom_histogram() + stat_density(geom = "lines")
p_mu + stat_density(geom = "line")
?geom_histogram
p_mu + geom_histogram(mapping = aes(y = ..count../sum(..count..))) + stat_density(geom = "line")
?stat_density
p_mu <- ggplot(data = NULL, mapping = aes(x = sims[501:1000, 1, 9]))
p_mu + geom_histogram(mapping = aes(y = ..count../sum(..count..)),
alpha = 0.2,
fill = "blue") +
stat_density(geom = "line")
p_mu <- ggplot(data = NULL, mapping = aes(x = sims[501:1000, 1, 9]))
p_mu + geom_histogram(mapping = aes(y = ..count../sum(..count..)),
alpha = 0.2,
fill = "blue") +
stat_density(geom = "line",
fill = "red")
p_mu <- ggplot(data = NULL, mapping = aes(x = sims[501:1000, 1, 9]))
p_mu + geom_histogram(mapping = aes(y = ..count../sum(..count..)),
alpha = 0.2,
fill = "blue") +
stat_density(geom = "line",
colour = "red")
p_mu <- ggplot(data = NULL, mapping = aes(x = sims[501:1000, 1, 9]))
p_mu + geom_histogram(mapping = aes(y = ..count../sum(..count..)),
alpha = 0.2,
fill = "blue") +
stat_density(geom = "line",
size = 2)
p_mu <- ggplot(data = NULL, mapping = aes(x = sims[501:1000, 1, 9]))
p_mu + geom_histogram(mapping = aes(y = ..count../sum(..count..)),
alpha = 0.2,
fill = "blue") +
stat_density(geom = "line",
size = 1)
mu <- seq(-10, 30, length = 5000)
dens <- dnorm(mu, mean = 7.8, sd = 5.3)
p_mu <- ggplot(data = NULL, mapping = aes(x = sims[501:1000, 1, 9]))
p_mu + geom_histogram(mapping = aes(y = ..count../sum(..count..)),
alpha = 0.2,
fill = "blue") +
geom_line(mapping = aes(x = mu, y = dens))
plot(mu, dens)
dnorm(7.8, 7.8, 5.3)
?geom_line
mu <- seq(-10, 30, length = 5000)
dens <- dnorm(mu, mean = 7.8, sd = 5.3)
p_mu <- ggplot(data = NULL, mapping = aes(x = sims[501:1000, 1, 9]))
p_mu + geom_histogram(mapping = aes(y = .5 * ..count../sum(..count..)),
alpha = 0.2,
fill = "blue") +
geom_line(mapping = aes(x = mu, y = dens)) +
labs(list(x = "Mu", y = "Density", title = "Estimate Posterior Distribution"))
mu <- seq(-10, 30, length = 5000)
dens <- dnorm(mu, mean = 7.8, sd = 5.3)
p_mu <- ggplot(data = NULL, mapping = aes(x = sims[501:1000, 1, 9]))
p_mu + geom_histogram(mapping = aes(y = .6 * ..count../sum(..count..)),
alpha = 0.2,
fill = "blue",
binwidth = 1) +
geom_line(mapping = aes(x = mu, y = dens)) +
labs(list(x = "Mu", y = "Density", title = "Estimate Posterior Distribution"))
mu <- seq(-10, 30, length = 5000)
dens <- dnorm(mu, mean = 7.8, sd = 5.3)
p_mu <- ggplot(data = NULL, mapping = aes(x = sims[501:1000, 1, 9]))
p_mu + geom_histogram(mapping = aes(y = .8 * ..count../sum(..count..)),
alpha = 0.2,
fill = "blue",
binwidth = 1) +
geom_line(mapping = aes(x = mu, y = dens)) +
labs(list(x = "Mu", y = "Density", title = "Estimate Posterior Distribution"))
sapply(sims[501:1000, 1, 2:8], max)
apply(sims[501:1000, 1, 2:8], 1, max)
(sims[501:1000, 1, 1] - apply(sims[501:1000, 1, 2:8], 1, max))
mean((sims[501:1000, 1, 1] - apply(sims[501:1000, 1, 2:8], 1, max)) > 0)
install.packages("ff")
getwd()
update.packageStatus()
update.package()
update.packages()
update.packages()
library(deepnet)
?deepnet
?"deepnet"
?dbn.dnn.train
?"stats-package"
library(darch)
?dbn.dnn.train
library(caret)
?"darch
""
"
?"darch"
cat("03L")
cat("x03L")
d
d
d
d
d
d
d
dd
d
d
d
d
d
d
cat("\014")
lm
data("iris")
?glm()
library(randomForest)
?randomForest
model.matrix()
?model.matrix()
View(iris)
model.matrix(~ Species, data = iris)
model.matrix(~ Species-1, data = iris)
model.matrix(~ .-1, data = iris)
?darch
glm.fit <- glm(Species ~ . data = iris)
glm.fit <- glm(Species ~ ., data = iris)
attach(iris)
lm.fit <- lm(Sepal.Width ~ ., data = iris)
str(lm.fit)
class(lm.fit)
setwd("~/Documents/git/DataAnalysis3")
rm(list = ls())
library(nnet)
library(darch)
library(deepnet)
library(caret)
library(doMC)
library(MASS)
library(h2o)
library(gbm)
library(plyr)
library(randomForest)
library(e1071)
library(ipred)
library(party)
library(mboost)
library(bst)
library(ff)
library(ISLR)
doMC::registerDoMC(cores=4)
data("Carseats")
data("Pima.tr")
data("Pima.te")
flist <- list("dig_test.RData", "dig_train.RData")
load(flist[[1]])
load(flist[[2]])
rm(flist)
dig_train <- data.frame(dig_train)
dig_train.raw <- dig_train
dig_test.raw <- dig_test
localH2O <- h2o.init(ip = "localhost", port = 54321, startH2O = TRUE)
set.seed(5262562)
data(Carseats)
trainIndex <- createDataPartition(Carseats$Sales, p=.75, list=F)
Carseats.train <- Carseats[trainIndex, ]
Carseats.test <- Carseats[-trainIndex, ]
ctrl <- trainControl(method = "cv",
number = 10)
inputs.train <- model.matrix(Sales ~ ., data = Carseats.train)
inputs.test <- model.matrix(Sales ~ ., data = Carseats.test)
models <- vector("list", 5)
models.mse <- c()
for (i in 1:5){
rand_numlayers <- sample(2:5, 1)
rand_hidden <- c(sample(10:50, rand_numlayers, T))
rand_dropout <- runif(1, 0, 0.6)
rand_learningrate <- runif(1, 0.6, 1)
dnn.fit.Carseats <- dbn.dnn.train(inputs.train,
Carseats.train[, 1],
hidden = rand_hidden,
activationfun = "sigm",
output = "linear",
hidden_dropout = rand_dropout,
learningrate = rand_learningrate,
visible_dropout = 0)
dnn.pred.Carseats <- nn.predict(dnn.fit.Carseats,
inputs.test)
dnn.mse.Carseats <- mean((dnn.pred.Carseats - Carseats.test[, 1])^2)
models[[i]] <- dnn.fit.Carseats
models.mse <- c(models.mse, dnn.mse.Carseats)
}
best.err <- models.mse[1]
best.model <- models[[1]]
for (i in 1:length(models)) {
err <- models.mse[i]
if (err < best.err) {
best.err <- err
best.model <- models[[i]]
}
}
dnn.fit.Carseats <- best.model
dnn.mse.Carseats <- best.err
dnn.pred.Carseats <- nn.predict(dnn.fit.Carseats,
inputs.test)
time4 <- Sys.time()
class(dnn.fit.Carseats)
dnn.fit.Carseats
summary(dnn.fit.Carseats)
dnn.pred.Carseats <- predict(dnn.fit.Carseats,
inputs.test)
dnn.fit.Carseats$hidden
dnn.fit.Carseats$size
?"darch"
# darch
darch.fit.Carseats <- newDArch(dnn.fit.Carseats$size,
batchSize=4,
ff=F)
darch.fit.Carseats <- preTrainDArch(darch.fit.Carseats,
inputs.train,
maxEpoch = 10,
numCD = 4)
layers <- getLayers(darch.fit.Carseats)
layers[[length(layers)]][[2]] <- linearUnitDerivative
for(i in (length(layers) - 1):1){
layers[[i]][[2]] <- sigmoidUnitDerivative
}
setLayers(darch.fit.Carseats) <- layers
rm(layers)
setFineTuneFunction(darch.fit.Carseats) <- rpropagation
darch.fit.Carseats <- fineTuneDArch(darch.fit.Carseats,
trainData = inputs.train,
targetData = matrix(Carseats.train$Sales),
maxEpoch = 10,
isBin = T)
str(layers)
# darch
darch.fit.Carseats <- newDArch(dnn.fit.Carseats$size,
batchSize=4,
ff=F)
darch.fit.Carseats <- preTrainDArch(darch.fit.Carseats,
inputs.train,
maxEpoch = 10,
numCD = 4)
layers <- getLayers(darch.fit.Carseats)
layers[[length(layers)]][[2]] <- linearUnitDerivative
for(i in (length(layers) - 1):1){
layers[[i]][[2]] <- sigmoidUnitDerivative
}
setLayers(darch.fit.Carseats) <- layers
#rm(layers)
setFineTuneFunction(darch.fit.Carseats) <- rpropagation
darch.fit.Carseats <- fineTuneDArch(darch.fit.Carseats,
trainData = inputs.train,
targetData = matrix(Carseats.train$Sales),
maxEpoch = 10,
isBin = T)
?layers
str(layers)
slotNames(darch.fit.Carseats)
darch.fit.Carseats@layers
str(darch.fit.Carseats@layers)
getLayers
str(darch.fit.Carseats)
# h2o
Carseats.train.h2o <- as.h2o(localH2O, model.matrix(~ . - 1 , data = Carseats.train))
Carseats.test.h2o <- as.h2o(localH2O, model.matrix(~ . - 1 , data = Carseats.test))
models <- c()
for (i in 1:10) {
rand_activation <- c("TanhWithDropout", "RectifierWithDropout")[sample(1:2,1)]
rand_numlayers <- sample(2:5,1)
rand_hidden <- c(sample(10:50,rand_numlayers,T))
rand_l1 <- runif(1, 0, 1e-3)
rand_l2 <- runif(1, 0, 1e-3)
rand_dropout <- c(runif(rand_numlayers, 0, 0.6))
rand_input_dropout <- runif(1, 0, 0.5)
dlmodel <- h2o.deeplearning(x = 2:13,
y = 1,
training_frame = Carseats.train.h2o,
validation_frame = Carseats.test.h2o,
epochs = 0.1,
activation = rand_activation,
hidden = rand_hidden,
l1 = rand_l1,
l2 = rand_l2,
input_dropout_ratio = 0,
hidden_dropout_ratios = rand_dropout)
models <- c(models, dlmodel)
}
best_mse <- models[[1]]@model$validation_metrics@metrics$MSE #best model from grid search above
for (i in 1:length(models)) {
mse.h2o <- models[[i]]@model$validation_metrics@metrics$MSE
if (mse.h2o < best_mse) {
best_mse <- mse.h2o
best_model <- models[[i]]
}
}
h2o.fit.Carseats <- best_model
h2o.mse.Carseats <- best_mse
time6 <- Sys.time()
str(layers)
sigmoidUnitDerivative
str(getLayer(darch.fit.Carseats)[[1]])
str(darch.fit.Carseats@layers)
str(darch.fit.Carseats@layers[[1]])
expand.grid(x = 1:3, y = 1:5)
?data
