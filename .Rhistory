sapply(spamdetect_train,sum)
sum(spamdetect_train[1,2])
sum(spamdetect_train[,41])
sum(spamdetect_train[spamdetect_train[,58]==0,41])
sum(spamdetect_train[spamdetect_train[,58]==1,41])
sapply(spamdetect_train[spamdetect_train[,58]==1,],sum)
sapply(spamdetect_train[spamdetect_train[,58]==0,],sum)
F<-c(-0.176,-0.188,-0.120,0.147)
fy<-c(-0.016,0.066,0.133,0.017)
F*fy
sum(F*fy)
0.08+qt(0.975,1)*sqrt(38.1)*sqrt(5.25*10^(-6))
0.08+qt(0.95,1)*sqrt(38.1)*sqrt(5.25*10^(-6))
0.08+qt(0.975,1)*sqrt(38.1)*sqrt(5.25*10^(-6))
qchisq(.95,1)
qchisq(.95,2)
(3/64)/(3/16)
sqrt(0.15^2+0.12^2)
exp(0.0022644)
1-pf(5.220,9,12)
2*50*17.9/qchisq(0.05,100)
2*50*17.9/qchisq(0.95,100)
install.packages()
install.packages("kernlab")
g
install.packages("kernlab")
library("kernlab")
data(spam)
spam
install.packages("Rcpp")
install.packages("Rweibo")
version()
?version
R.version
install.packages("tm")
install.packages("Rwordseg")
install.packages(“Rweibo”, repos = “http://R-Forge.R-project.org”, type=”source”)
install.packages("Rweibo", repos = "http://R-Forge.R-project.org", type="source")
?Rweibo
installed.packages()
install.packages("Rweibo", repos = "http://R-Forge.R-project.org", type="source")
install.packages("Rweibo", repos = "http://R-Forge.R-project.org")
install.packages("Rweibo", repos = "http://R-Forge.R-project.org")
install.packages("RCurl")
install.packages("Rjson")
install.packages("rjson")
install.packages("XML")
install.packages("Rweibo")
install.packages("Rwordseg")
install.packages("ISLR")
Khan
library("ISLR", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Khan
summary(Khan)
str(Khan)
ls()
rm(list=ls())
q()
q()
library(knitr)
knitr('test.rtex')
knit('test.rtex')
library
library()
install.packages("ggplot")
install.packages("ggplot2")
library()
?library
getwd()
setwd("/User/pengs/Documents/MyGit/DataAnalysis3")
setwd("/User/pengs/Documents/MyGit/DataAnalysis3")
setwd("/User/pengs/Documents/MyGit/DataAnalysis3")
setwd("~/Documents/MyGit/DataAnalysis3")
rm(list = ls())
library(ISLR)
library(ggplot2)
library(MASS)
library(class)
library(pROC)
attach(Weekly)
rm(list = ls())
Boston$crim01 <- as.numeric(Boston$crim > median(Boston$crim))
set.seed(1)
rands <- rnorm(nrow(Boston))
test <- rands > quantile(rands,0.75)
train <- !test
Boston.train <- Boston[train,]
Boston.test <- Boston[test,]
Boston.train.fact <- Boston.train
Boston.train.fact$crim01 <- factor(Boston.train.fact$crim01)
pairs(Boston.train.fact, colour='crim01')
rm(list = ls())
Boston$crim01 <- as.numeric(Boston$crim > median(Boston$crim))
set.seed(1)
rands <- rnorm(nrow(Boston))
test <- rands > quantile(rands, 0.75)
train <- !test
Boston.train <- Boston[train, ]
Boston.test <- Boston[test, ]
Boston.train.fact <- Boston.train
Boston.train.fact$crim01 <- factor(Boston.train.fact$crim01)
cor(Boston)
rm(list = ls())
Boston$crim01 <- as.numeric(Boston$crim > median(Boston$crim))
set.seed(1)
rands <- rnorm(nrow(Boston))
test <- rands > quantile(rands, 0.75)
train <- !test
Boston.train <- Boston[train, ]
Boston.test <- Boston[test, ]
Boston.train.fact <- Boston.train
Boston.train.fact$crim01 <- factor(Boston.train.fact$crim01)
cor(Boston[, 1], Boston[, -c(1, ncol(Boston))])
rm(list = ls())
Boston$crim01 <- as.numeric(Boston$crim > median(Boston$crim))
set.seed(1)
rands <- runif(nrow(Boston))
test <- rands > quantile(rands, 0.75)
train <- !test
Boston.train <- Boston[train, ]
Boston.test <- Boston[test, ]
Boston.train$crim01 <- factor(Boston.train$crim01)
cor(Boston[, 1], Boston[, -c(1, ncol(Boston))])
rm(list = ls())
subset <- as.numeric(abs(cor(Boston[, 1], Boston[, -1])) > 0.4)
Boston$crim01 <- as.numeric(Boston$crim > median(Boston$crim))
set.seed(1)
rands <- runif(nrow(Boston))
test <- rands > quantile(rands, 0.75)
train <- !test
Boston.train <- Boston[train, ]
Boston.test <- Boston[test, ]
Boston.train$crim01 <- factor(Boston.train$crim01)
subset
rm(list = ls())
subset <- c(1, as.numeric(abs(cor(Boston[, 1], Boston[, -1])) > 0.4), 1)
Boston$crim01 <- as.numeric(Boston$crim > median(Boston$crim))
set.seed(1)
rands <- runif(nrow(Boston))
test <- rands > quantile(rands, 0.75)
train <- !test
Boston.train <- Boston[train, subset]
Boston.test <- Boston[test, subset]
Boston.train$crim01 <- factor(Boston.train$crim01)
Boston.train
subset
names(Boston)
is(Boston.train)
names(Boston.train)
rm(list = ls())
subset <- c(TRUE, abs(cor(Boston[, 1], Boston[, -1])) > 0.4, TRUE)
Boston$crim01 <- as.numeric(Boston$crim > median(Boston$crim))
set.seed(1)
rands <- runif(nrow(Boston))
test <- rands > quantile(rands, 0.75)
train <- !test
Boston.train <- Boston[train, subset]
Boston.test <- Boston[test, subset]
Boston.train$crim01 <- factor(Boston.train$crim01)
names(Boston.train)
rm(list = ls())
subset <- c(TRUE, abs(cor(Boston[, 1], Boston[, -1])) > 0.3, TRUE)
Boston$crim01 <- as.numeric(Boston$crim > median(Boston$crim))
set.seed(1)
rands <- runif(nrow(Boston))
test <- rands > quantile(rands, 0.75)
train <- !test
Boston.train <- Boston[train, subset]
Boston.test <- Boston[test, subset]
Boston.train$crim01 <- factor(Boston.train$crim01)
names(Boston.train)
rm(list = ls())
subset <- c(FALSE, abs(cor(Boston[, 1], Boston[, -1])) > 0.3, TRUE)
Boston$crim01 <- as.numeric(Boston$crim > median(Boston$crim))
set.seed(1)
rands <- runif(nrow(Boston))
test <- rands > quantile(rands, 0.75)
train <- !test
Boston.train <- Boston[train, subset]
Boston.test <- Boston[test, subset]
Boston.train$crim01 <- factor(Boston.train$crim01)
rm(list = ls())
ConfusionTable <- function(ct){
accuracy <- (ct[1, 1] + ct[2, 2]) / (sum(ct))
TPr <- ct[2, 2] / (ct[1, 2] + ct[2, 2])
FPr <- ct[2, 1] / (ct[1, 1] + ct[2, 1])
precision <- ct[2, 2] / (ct[2, 1] + ct[2, 2])
error <- 1 - accuracy
result <- list(accuracy, TPr, FPr, precision, error)
names(result) <- c("Accuracy", "True Positive Rate",
"False Posistive Rate", "Precision",
"Total Error Rate")
return(result)
}
cor(Boston[, 1], Boston[, -1])
subset1 <- c(FALSE, abs(cor(Boston[, 1], Boston[, -1])) > 0.3, TRUE)
subset2 <- c(FALSE, abs(cor(Boston[, 1], Boston[, -1])) > 0.4, TRUE)
subset3 <- c(FALSE, abs(cor(Boston[, 1], Boston[, -1])) > 0.5, TRUE)
Boston$crim01 <- as.numeric(Boston$crim > median(Boston$crim))
set.seed(1)
rands <- runif(nrow(Boston))
test <- rands > quantile(rands, 0.75)
train <- !test
Boston.train <- Boston[train, subset1]
Boston.test <- Boston[test, subset1]
Boston.train$crim01 <- factor(Boston.train$crim01)
glm.fit=glm(crim01 ~ ., data=Boston.train)
summary(glm.fit)
glm.fit=glm(crim01 ~ dis., data=Boston.train)
glm.fit=glm(crim01 ~ dis, data=Boston.train)
glm.fit=glm(crim01 ~ dis, data=Boston.train)
names(Boston.train)
?glm
glm.fit=glm(crim01 ~ dis, data=Boston.train, family = gaussian)
glm.fit=glm(crim01 ~ dis, data=Boston, family = gaussian)
rm(list = ls())
ConfusionTable <- function(ct){
accuracy <- (ct[1, 1] + ct[2, 2]) / (sum(ct))
TPr <- ct[2, 2] / (ct[1, 2] + ct[2, 2])
FPr <- ct[2, 1] / (ct[1, 1] + ct[2, 1])
precision <- ct[2, 2] / (ct[2, 1] + ct[2, 2])
error <- 1 - accuracy
result <- list(accuracy, TPr, FPr, precision, error)
names(result) <- c("Accuracy", "True Positive Rate",
"False Posistive Rate", "Precision",
"Total Error Rate")
return(result)
}
cor(Boston[, 1], Boston[, -1])
subset1 <- c(FALSE, abs(cor(Boston[, 1], Boston[, -1])) > 0.3, TRUE)
subset2 <- c(FALSE, abs(cor(Boston[, 1], Boston[, -1])) > 0.4, TRUE)
subset3 <- c(FALSE, abs(cor(Boston[, 1], Boston[, -1])) > 0.5, TRUE)
Boston$crim01 <- as.numeric(Boston$crim > median(Boston$crim))
set.seed(1)
rands <- runif(nrow(Boston))
test <- rands > quantile(rands, 0.75)
train <- !test
Boston.train <- Boston[train, subset1]
Boston.test <- Boston[test, subset1]
glm.fit=glm(crim01 ~ dis, data=Boston.train)
summary(glm.fit)
rm(list = ls())
ConfusionTable <- function(ct){
accuracy <- (ct[1, 1] + ct[2, 2]) / (sum(ct))
TPr <- ct[2, 2] / (ct[1, 2] + ct[2, 2])
FPr <- ct[2, 1] / (ct[1, 1] + ct[2, 1])
precision <- ct[2, 2] / (ct[2, 1] + ct[2, 2])
error <- 1 - accuracy
result <- list(accuracy, TPr, FPr, precision, error)
names(result) <- c("Accuracy", "True Positive Rate",
"False Posistive Rate", "Precision",
"Total Error Rate")
return(result)
}
cor(Boston[, 1], Boston[, -1])
subset1 <- c(FALSE, abs(cor(Boston[, 1], Boston[, -1])) > 0.3, TRUE)
subset2 <- c(FALSE, abs(cor(Boston[, 1], Boston[, -1])) > 0.4, TRUE)
subset3 <- c(FALSE, abs(cor(Boston[, 1], Boston[, -1])) > 0.5, TRUE)
Boston$crim01 <- as.numeric(Boston$crim > median(Boston$crim))
set.seed(1)
rands <- runif(nrow(Boston))
test <- rands > quantile(rands, 0.75)
train <- !test
Boston.train <- Boston[train, subset1]
Boston.test <- Boston[test, subset1]
glm.fit=glm(crim01 ~ dis, data=Boston.train, family = binomial)
summary(glm.fit)
rm(list = ls())
ConfusionTable <- function(ct){
accuracy <- (ct[1, 1] + ct[2, 2]) / (sum(ct))
TPr <- ct[2, 2] / (ct[1, 2] + ct[2, 2])
FPr <- ct[2, 1] / (ct[1, 1] + ct[2, 1])
precision <- ct[2, 2] / (ct[2, 1] + ct[2, 2])
error <- 1 - accuracy
result <- list(accuracy, TPr, FPr, precision, error)
names(result) <- c("Accuracy", "True Positive Rate",
"False Posistive Rate", "Precision",
"Total Error Rate")
return(result)
}
cor(Boston[, 1], Boston[, -1])
subset1 <- c(FALSE, abs(cor(Boston[, 1], Boston[, -1])) > 0.3, TRUE)
subset2 <- c(FALSE, abs(cor(Boston[, 1], Boston[, -1])) > 0.4, TRUE)
subset3 <- c(FALSE, abs(cor(Boston[, 1], Boston[, -1])) > 0.5, TRUE)
Boston$crim01 <- as.numeric(Boston$crim > median(Boston$crim))
set.seed(1)
rands <- runif(nrow(Boston))
test <- rands > quantile(rands, 0.75)
train <- !test
Boston.train <- Boston[train, subset1]
Boston.test <- Boston[test, subset1]
glm.fit=glm(crim01 ~ ., data=Boston.train, family = binomial)
summary(glm.fit)
rm(list = ls())
ConfusionTable <- function(ct){
accuracy <- (ct[1, 1] + ct[2, 2]) / (sum(ct))
TPr <- ct[2, 2] / (ct[1, 2] + ct[2, 2])
FPr <- ct[2, 1] / (ct[1, 1] + ct[2, 1])
precision <- ct[2, 2] / (ct[2, 1] + ct[2, 2])
error <- 1 - accuracy
result <- list(accuracy, TPr, FPr, precision, error)
names(result) <- c("Accuracy", "True Positive Rate",
"False Posistive Rate", "Precision",
"Total Error Rate")
return(result)
}
cor(Boston[, 1], Boston[, -1])
subset1 <- c(FALSE, abs(cor(Boston[, 1], Boston[, -1])) > 0.3, TRUE)
subset2 <- c(FALSE, abs(cor(Boston[, 1], Boston[, -1])) > 0.4, TRUE)
subset3 <- c(FALSE, abs(cor(Boston[, 1], Boston[, -1])) > 0.5, TRUE)
Boston$crim01 <- as.numeric(Boston$crim > median(Boston$crim))
set.seed(1)
rands <- runif(nrow(Boston))
test <- rands > quantile(rands, 0.75)
train <- !test
Boston.train <- Boston[train, ]
Boston.test <- Boston[test, ]
glm.fit=glm(crim01 ~ ., data=Boston.train, family = binomial)
summary(glm.fit)
rm(list = ls())
ConfusionTable <- function(ct){
accuracy <- (ct[1, 1] + ct[2, 2]) / (sum(ct))
TPr <- ct[2, 2] / (ct[1, 2] + ct[2, 2])
FPr <- ct[2, 1] / (ct[1, 1] + ct[2, 1])
precision <- ct[2, 2] / (ct[2, 1] + ct[2, 2])
error <- 1 - accuracy
result <- list(accuracy, TPr, FPr, precision, error)
names(result) <- c("Accuracy", "True Positive Rate",
"False Posistive Rate", "Precision",
"Total Error Rate")
return(result)
}
cor(Boston[, 1], Boston[, -1])
subset1 <- c(FALSE, abs(cor(Boston[, 1], Boston[, -1])) > 0.3, TRUE)
subset2 <- c(FALSE, abs(cor(Boston[, 1], Boston[, -1])) > 0.4, TRUE)
subset3 <- c(FALSE, abs(cor(Boston[, 1], Boston[, -1])) > 0.5, TRUE)
Boston$crim01 <- as.numeric(Boston$crim > median(Boston$crim))
set.seed(1)
rands <- runif(nrow(Boston))
test <- rands > quantile(rands, 0.75)
train <- !test
Boston.train <- Boston[train, -1]
Boston.test <- Boston[test, -1]
glm.fit=glm(crim01 ~ ., data=Boston.train, family = binomial)
summary(glm.fit)
str(glm.fit)
str(glm.fit$coefficients)
lda.fit=lda(crim01 ~ ., data=Boston.train)
summary(lda.fit)
lda.fit
lda.fit <- lda(crim01 ~ nox + dis + ptratio, data=Boston.train)
lda.pred=predict(lda.fit,Boston.test)$class
ct <- table(lda.pred,Boston.test$crim01)
ct
ConfusionTable(ct)
lda.fit <- lda(crim01 ~ nox + ptratio, data=Boston.train)
lda.pred=predict(lda.fit,Boston.test)$class
ct <- table(lda.pred,Boston.test$crim01)
ct
ConfusionTable(ct)
source('~/Documents/MyGit/DataAnalysis3/test.R', echo=TRUE)
?Boston
logis.fit <- glm(crim01 ~ zn + nox + black + dis + rad + tax + ptratio + medv, data=Boston.train, family = binomial)
logis.pred=predict(logis.fit, Boston.test, type="response")
ct <- table(logis.pred,Boston.test$crim01)
ct
logis.fit <- glm(crim01 ~ zn + nox + black + dis + rad + tax + ptratio + medv, data=Boston.train, family = binomial)
logis.probs=predict(logis.fit, Boston.test, type="response")
logis.pred <- rep("Down", nrow(Weekly.test))
logis.pred[logis.probs > 0.50] <- "Up"
ct <- table(logis.pred,Boston.test$crim01)
ct
ConfusionTable(ct)
logis.fit <- glm(crim01 ~ zn + nox + black + dis + rad + tax + ptratio + medv, data=Boston.train, family = binomial)
logis.probs=predict(logis.fit, Boston.test, type="response")
logis.pred <- rep(0, nrow(Boston.test))
logis.pred[logis.probs > 0.50] <- 1
ct <- table(logis.pred,Boston.test$crim01)
ct
logis.fit <- glm(crim01 ~ zn + nox + black + dis + rad + tax + ptratio + medv, data=Boston.train, family = binomial)
logis.probs=predict(logis.fit, Boston.test, type="response")
logis.pred <- rep(0, nrow(Boston.test))
logis.pred[logis.probs > 0.50] <- 1
ct <- table(logis.pred,Boston.test$crim01)
ct
ConfusionTable(ct)
logis.fit <- glm(crim01 ~ nox:dis + rad + ptratio, data=Boston.train, family = binomial)
logis.probs=predict(logis.fit, Boston.test, type="response")
logis.pred <- rep(0, nrow(Boston.test))
logis.pred[logis.probs > 0.50] <- 1
ct <- table(logis.pred,Boston.test$crim01)
ct
ConfusionTable(ct)
logis.fit <- glm(crim01 ~ zn + nox + nox*dis + black + dis + rad + tax + ptratio + medv, data=Boston.train, family = binomial)
logis.probs=predict(logis.fit, Boston.test, type="response")
logis.pred <- rep(0, nrow(Boston.test))
logis.pred[logis.probs > 0.50] <- 1
ct <- table(logis.pred,Boston.test$crim01)
ct
ConfusionTable(ct)
logis.fit <- glm(crim01 ~ nox*dis + rad + ptratio, data=Boston.train, family = binomial)
logis.probs=predict(logis.fit, Boston.test, type="response")
logis.pred <- rep(0, nrow(Boston.test))
logis.pred[logis.probs > 0.50] <- 1
ct <- table(logis.pred,Boston.test$crim01)
ct
ConfusionTable(ct)
logis.fit <- glm(crim01~nox*dis+medv:tax+rad+age, data=Boston.train, family = binomial)
logis.probs=predict(logis.fit, Boston.test, type="response")
logis.pred <- rep(0, nrow(Boston.test))
logis.pred[logis.probs > 0.50] <- 1
ct <- table(logis.pred,Boston.test$crim01)
ct
ConfusionTable(ct)
logis.fit <- glm(crim01 ~ nox : dis + rad + ptratio, data=Boston.train, family = binomial)
logis.probs=predict(logis.fit, Boston.test, type="response")
logis.pred <- rep(0, nrow(Boston.test))
logis.pred[logis.probs > 0.50] <- 1
ct <- table(logis.pred,Boston.test$crim01)
ct
ConfusionTable(ct)
logis.fit <- glm(crim01 ~ nox * dis + rad + ptratio, data=Boston.train, family = binomial)
logis.probs=predict(logis.fit, Boston.test, type="response")
logis.pred <- rep(0, nrow(Boston.test))
logis.pred[logis.probs > 0.50] <- 1
ct <- table(logis.pred,Boston.test$crim01)
ct
ConfusionTable(ct)
qda.fit <- qda(Direction ~ Lag2 + Lag1, data = Weekly, subset = train)
names(Weekly.test)
qda.fit <- qda(Direction ~ Lag2 + Lag1, data = Weekly, subset = train)
qda.class <- predict(qda.fit, Weekly.test)$class
ct <- table(qda.class, Weekly.test$Direction)
ct
ConfusionTable(ct)$Accuracy
names(Weekly)
Weekly.test <- Weekly[!train, ]
lda.fit <- lda(Direction ~ Lag2 + Lag1, data = Weekly, subset = train)
lda.class <- predict(lda.fit, Weekly.test)$class
ct <- table(lda.class,Weekly.test$Direction)
ct
ConfusionTable(ct)
lda.fit <- lda(Direction ~ Lag2, data = Weekly, subset = train)
lda.class <- predict(lda.fit, Weekly.test)$class
ct <- table(lda.class,Weekly.test$Direction)
ct
ConfusionTable(ct)
logit.fit <- glm(Direction ~ Lag2 + I(Lag2^2) + I(Lag2^3), family = binomial, data = Weekly, subset = train)
?Boston
?pairs
>pch
?pch
?pairs
?cex
?par
?Boston
ggplot(Boston,aes(x = variable,y = value)) + facet_wrap(~variable) + geom_boxplot()
ggplot(Boston,aes(x = variable,y = value)) + geom_boxplot()
B <- melt(Boston)
library(reshape)
B <- melt(Boston)
ggplot(Boston,aes(x = variable,y = value)) + geom_boxplot()
ggplot(B,aes(x = variable,y = value)) + geom_boxplot()
scale(Boston)
B <- melt(scale(Boston))
ggplot(B,aes(x = variable,y = value)) + geom_boxplot()
library(reshape)
B <- melt(scale(Boston))
B <- melt(as.datafrac(scale(Boston)))
B <- melt(as.dataframe(scale(Boston)))
B <- melt(as.data.frame(scale(Boston)))
ggplot(B,aes(x = variable,y = value)) + geom_boxplot()
lm.fit <- lm(1 ~ 2, data = Boston)
lm.fit <- lm(Boston[, 1] ~ Boston[, 2], data = Boston)
?for
K
for (k in c(2:14)){
lm.fit <- lm(Boston[, 1] ~ Boston[, k], data = Boston)
summary.lm(lm.fit)
}
for (k in c(2:14)){
lm.fit <- lm(Boston[, 1] ~ Boston[, k], data = Boston)
summary(lm.fit)
}
lm.fit <- lm(Boston[, 1] ~ Boston[, k], data = Boston)
summary(lm.fit)
summary.lm(lm.fit)
summary.lm(lm.fit)```
?Boston
ggplot(data = Boston, aes(x = zn, y = crim)) + geom_point() + stat_smooth()
ggplot(data = Boston, aes(x = zn, y = crim)) + geom_point() + stat_smooth(method = lowess)
ggplot(data = Boston, aes(x = zn, y = crim)) + geom_point() + stat_smooth(method = lowess(x = zn, y = crim))
ggplot(data = Boston, aes(x = zn, y = crim)) + geom_point() + stat_smooth(method = lowess(x = Boston$zn, y = Boston$crim))
ggplot(data = Boston, aes(x = zn, y = crim)) + geom_point() + stat_smooth()
lm.fit <- lm(formula = crim ~ zn, data = Boston)
plot(Boston$zn, Boston$crim)
abline(lm.fit)
lm.fit <- lm(formula = crim ~ ., data = Boston)
lm.fit$coefficients
str(lm.fit$coefficients)
lm.fit$coefficients[2]
lm.fit$coefficients[-1]
x <- rep(NULL, 13)
x
x <- rep(0, 13)
x
?plot
names(y)
y <- lm.fit$coefficients[-1]
names(y)
name <- as.vector(names(y))
name
