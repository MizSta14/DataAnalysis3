library()
install.packages("ggplot")
install.packages("ggplot2")
library()
?library
getwd()
setwd("/User/pengs/Documents/MyGit/DataAnalysis3")
setwd("/User/pengs/Documents/MyGit/DataAnalysis3")
setwd("/User/pengs/Documents/MyGit/DataAnalysis3")
setwd("/User/pengs/Documents/MyGit/DataAnalysis3")
setwd("/User/pengs/Documents/MyGit")
list.dirs("User/pengs/Documents")
list.dirs("User/pengs")
list.dirs("~")
getwd()
setwd("~/Documents/MyGit/DataAnalysis3")
getwd()
#R labs 4
library(ISLR)
names(Smarket)
dim(Smarket)
summary(Smarket)
cor(Smarket)
cor(Smarket)
cor(Smarket[, -9])
cor(Smarket[, -9])
aattach(Smarket)
attach(Smarket)
plot(Volume)
data=Smarket,family=binomial)
data=Smarket,family=binomial)
+Lag5+Volume,
data=Smarket,family=binomial)
plot(Volume)
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial)
summary(glm.fit)
coef(glm.fit)
glm.probs=predict(glm.fit,type="response")
glm.probs[1:10]
(Smarket)
pairs(Smarket)
names(Smarket)
Direction
dim(Smarket)
contrasts(Direction)
glm.pred=rep("Down",1250)
glm.pred[glm.probs>.5]="Up"
table(glm.pred,Direction)
(507+145)/1250
mean(glm.pred==Direction)
train=(Year<2005)
Smarket.2005=Smarket[!train,]
dim(Smarket.2005)
Direction.2005=Direction[!train]
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial,subset=train)
glm.probs=predict(glm.fit,Smarket.2005,type="response")
glm.pred=rep("Down",252)
glm.pred[glm.probs>.5]="Up"
table(glm.pred,Direction.2005)
mean(glm.pred==Direction.2005)
mean(glm.pred!=Direction.2005)
glm.fit=glm(Direction~Lag1+Lag2,data=Smarket,family=binomial,subset=train)
glm.probs=predict(glm.fit,Smarket.2005,type="response")
glm.pred=rep("Down",252)
glm.pred[glm.probs>.5]="Up"
table(glm.pred,Direction.2005)
mean(glm.pred==Direction.2005)
106/(106+76)
predict(glm.fit,newdata=data.frame(Lag1=c(1.2,1.5),
Lag2=c(1.1,-0.8)),type="response")
data.frame(Lag1=c(1.2,1.5),
+ Lag2=c(1.1,-0.8))
data.frame(Lag1=c(1.2,1.5),Lag2=c(1.1,-0.8))
library(MASS)
lda.fit=lda(Direction~Lag1+Lag2,data=Smarket,subset=train)
lda.fit
lda.fit
plot(lda.fit)
par("mar")
par(mar=c(1,1,1,1))
plot(lda.fit)
lda.pred=predict(lda.fit, Smarket.2005)
names(lda.pred)
str(lda.fit)
lda.class=lda.pred$class
table(lda.class,Direction.2005)
lda.class
?table
table(lda.class)
table(Direction.2005)
table(lda.class,Direction.2005)
mean(lda.class==Direction.2005)
sum(lda.pred$posterior[,1]>=.5)
sum(lda.pred$posterior[,1]<.5)
lda.pred$posterior[1:20,1]
lda.class[1:20]
sum(lda.pred$posterior[,1]>.9)
# Quadratic Discriminant Analysis
qda.fit=qda(Direction~Lag1+Lag2,data=Smarket,subset=train)
qda.fit
qda.class=predict(qda.fit,Smarket.2005)$class
table(qda.class,Direction.2005)
mean(qda.class==Direction.2005)
# K-Nearest Neighbors
is(Lag1)
library(class)
train.X=cbind(Lag1,Lag2)[train,]
test.X=cbind(Lag1,Lag2)[!train,]
train.Direction=Direction[train]
set.seed(1)
knn.pred=knn(train.X,test.X,train.Direction,k=1)
table(knn.pred,Direction.2005)
(83+43)/252
knn.pred=knn(train.X,test.X,train.Direction,k=3)
table(knn.pred,Direction.2005)
mean(knn.pred==Direction.2005)
# An Application to Caravan Insurance Data
dim(Caravan)
attach(Caravan)
summary(Purchase)
348/5822
standardized.X=scale(Caravan[,-86])
var(Caravan[,1])
var(Caravan[,2])
var(standardized.X[,1])
var(standardized.X[,2])
test=1:1000
train.X=standardized.X[-test,]
test.X=standardized.X[test,]
train.Y=Purchase[-test]
test.Y=Purchase[test]
set.seed(1)
knn.pred=knn(train.X,test.X,train.Y,k=1)
mean(test.Y!=knn.pred)
mean(test.Y!="No")
table(knn.pred,test.Y)
9/(68+9)
knn.pred=knn(train.X,test.X,train.Y,k=3)
table(knn.pred,test.Y)
5/26
knn.pred=knn(train.X,test.X,train.Y,k=5)
table(knn.pred,test.Y)
4/15
glm.fit=glm(Purchase~.,data=Caravan,family=binomial,subset=-test)
glm.probs=predict(glm.fit,Caravan[test,],type="response")
glm.pred=rep("No",1000)
glm.pred[glm.probs>.5]="Yes"
table(glm.pred,test.Y)
glm.pred=rep("No",1000)
glm.pred[glm.probs>.25]="Yes"
table(glm.pred,test.Y)
11/(22+11)
rm(list = ls())
library(ISLR)
attach(Smarket)
library(ggplot2)
detach(Smark)
detach(Smarket)
attach(Weekly)
summary(Weekly)
pairs(Weekly)
cor(Weekly[, -9])
par(mar = c(1, 1, 1, 1))
?data
plotmatrix(Weekly[, -9])
?deprecated
?"plotmatrix"
data("iris")
plotmatrix(iris[1:4])
install.packages("GGally")
?ggpairs
plotmatrix(iris[1:4])
splom(~iris[1:4])
require(lattice)
require(ggplot2)
splom(~iris[1:4])
splom(Weekly[, -9])
plotmatrix(iris[1:4])
ggpairs
library
library()
?ggpairs
??ggpairs
??ggpair
?ggpair
plotmatrix(mtcars[, 1:3])
png(filename="/Users/pengs/Documents/result/ggplot2/plotmatrix.Rd_%03d_medium.png", width=480, height=480)
plotmatrix(mtcars[, 1:3])
p <- ggplot(data = Weekly, mapping = aes(x=Year, y=Volume))
print(p)
p <- geom_point()
print(p)
summary(p)
p <- ggplot(data = Weekly, mapping = aes(x=Year, y=Volume))
p + geom_point()
p + geom_point() + stat_smooth()
d <- ggplot(data = Weekly, mappiin)
d <- ggplot(data = Weekly, mapping = aes(x = Today, y = Direction))
d + geom_point()
str(Weekly)
p + geom_point(aes(color = factor(Direction))
)
pairs(Weekly[, -9], col = Direction)
pairs(Weekly, col = Direction)
glm.probs=predict(logit.fit,Weekly,type="response")
glm.pred=rep("Down",nrow(Weekly))
glm.pred[glm.probs > 0.50]="Up"
table(glm.pred, Direction)
mean(glm.pred == Direction)
glm.pred
glm.pred
glm.probs
glm.probs=predict(logit.fit,type="response")
logit.fit = glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume,
family = binomial, data = Weekly)
summary(logit.fit)
glm.probs=predict(logit.fit,type="response")
glm.pred=rep("Down",nrow(Weekly))
glm.pred[glm.probs > 0.50]="Up"
table(glm.pred, Direction)
mean(glm.pred == Direction)
t1 <- table(glm.pred, Direction)
t
t1
str(t1)
names(t1)
rows(t1)
row(t1)
t1
t1("Down", "Down")
t1["Down", "Down"]
x=1
name(x)
names(x)
names(x)=ss
names(x)="ss"
ss
as.list(x)
y=1
as.list(x,y)
as.list(c(x,y)
)
list(5)
list(rep(NULL, 5))
list(rep(5, 5))
x <- list()
x
str(x)
x(3)
x=1
x
sum(t1)
t1
ConfusionTable <- function(ct){
accuracy <- (ct(1, 1) + ct(2, 2)) / (sum(ct))
TPr <- ct(2, 2) / (ct(1, 2) + ct(2, 2))
FPr <- ct(2, 1) / (ct(1, 1) + ct(2, 1))
precision <- ct(2, 2) / (ct(2, 1) + ct(2, 2))
error <- 1 - accuracy
result <- list(accuracy, TPr, FPr, precision, error)
names(result) <- c("Accuracy", "True Positive Rate",
"False Posistive Rate", "Precision",
"Error Rate")
return(result)
}
ConfusionTable(t1)
484/sum(t1)
sum(t1)
train <- Year <= 2008
Weekly.test <- Weekly[!train]
range(Year)
train.X <- Lag2[train]
test.X <- Lag2[!train]
train.Direction <- Direction[train]
set.seed(1)
knn.pred <- knn(train.X, test.X, train.Direction, k=1)
train.X <- Lag2[train, ]
train.X <- matrix(Lag2[train])
train.X <- matrix(Lag2[train])
test.X <- matrix(Lag2[!train])
train.Direction <- Direction[train]
test.Direction <- Direction[!train]
set.seed(1)
knn.pred <- knn(train.X, test.X, train.Direction, k=1)
install.packages("pROC")
train <- Year <= 2008
Weekly.test <- Weekly[!train, ]
logit.fit <- glm(Direction ~ Lag2, family = binomial, data = Weekly, subset = train)
glm.probs <- predict(logit.fit, Weekly.test, type="response")
Weekly.test$prob <- glm.probs
library(pROC)
g <- roc(Direction ~ prob, data = Weekly.test)
plot(g)
par(nfrow)
?nfrow
?par
par(mfrow = c(2, 2))
plot(g)
?plot
plot(g, main = Logistic Regression)
plot(g, main = "Logistic Regression")
plot.roc(g)
str(knn.pred)
knn.fit <- knn(train.X, train.Direction, k=1)
?knn
knn.fit <- knn(train = train.X, cl = train.Direction, k=1)
knn.pred <- knn(train.X, test.X, train.Direction, k=1, prob = TRUE)
knn.pred
knnFit <- train(train.Direction ~ train.X, method = "knn")
library(caret)
install.packages("library(caret)")
install.packages("caret")
library(caret)
knnFit <- train(train.Direction ~ train.X, method = "knn")
train.data <- data.frame(train.X, train.Direction)
dim(train.data)
knnFit <- train(Direction ~ X, data = train.data, method = "knn")
names(train.data)
knnFit <- train(train.Direction ~ train.X, data = train.data, method = "knn")
knn.probs <- predict(knnFit, Weekly.test)
str(knnFit)
knnPredict <- predict(knnFit,newdata = testing )
knnPredict <- predict(knnFit,newdata = test.X )
test.data <- data.frame(test.X, test.Direction)
knnPredict <- predict(knnFit,newdata = test.data )
knnFit
par(mfrow = c(2, 2))
glm.probs <- predict(logit.fit, Weekly.test, type="response")
Weekly.test$prob <- glm.probs
g <- roc(Direction ~ prob, data = Weekly.test)
plot(g, main = "Logistic Regression")
lda.probs <- predict(lda.fit, Weekly.test)$posterior
Weekly.test$prob <- lda.probs
g <- roc(Direction ~ prob, data = Weekly.test)
plot(g, main = "LDA")
qda.probs <- predict(qda.fit, Weekly.test)$posterior
Weekly.test$prob <- qda.probs
g <- roc(Direction ~ prob, data = Weekly.test)
plot(g, main = "QDA")
train <- Year <= 2008
Weekly.test <- Weekly[!train, ]
logit.fit <- glm(Direction ~ Lag2, family = binomial, data = Weekly, subset = train)
glm.probs <- predict(logit.fit, Weekly.test, type="response")
glm.pred <- rep("Down", nrow(Weekly.test))
glm.pred[glm.probs > 0.50] <- "Up"
ct <- table(glm.pred, Weekly.test$Direction)
ct
ConfusionTable(ct)$Accuracy
lda.fit <- lda(Direction ~ Lag2, data = Weekly, subset = train)
lda.class <- predict(lda.fit, Weekly.test)$class
ct <- table(lda.class,Weekly.test$Direction)
ct
qda.fit <- qda(Direction ~ Lag2, data = Weekly, subset = train)
qda.class <- predict(qda.fit, Weekly.test)$class
ct <- table(qda.class, Weekly.test$Direction)
ct
train.X <- matrix(Lag2[train])
test.X <- matrix(Lag2[!train])
train.Direction <- Direction[train]
test.Direction <- Direction[!train]
set.seed(1)
knn.pred <- knn(train.X, test.X, train.Direction, k = 1)
ct <- table(knn.pred, test.Direction)
ct
par(mfrow = c(2, 2))
glm.probs <- predict(logit.fit, Weekly.test, type="response")
Weekly.test$prob <- glm.probs
g <- roc(Direction ~ prob, data = Weekly.test)
plot(g, main = "Logistic Regression")
lda.probs <- predict(lda.fit, Weekly.test)$posterior
Weekly.test$prob <- lda.probs
g <- roc(Direction ~ prob, data = Weekly.test)
plot(g, main = "LDA")
qda.probs <- predict(qda.fit, Weekly.test)$posterior
Weekly.test$prob <- qda.probs
g <- roc(Direction ~ prob, data = Weekly.test)
plot(g, main = "QDA")
rm(list = ls())
library(ISLR)
library(ggplot2)
library(MASS)
library(class)
library(pROC)
attach(Weekly)
train <- Year <= 2008
Weekly.test <- Weekly[!train, ]
logit.fit <- glm(Direction ~ Lag2, family = binomial, data = Weekly, subset = train)
glm.probs <- predict(logit.fit, Weekly.test, type="response")
glm.pred <- rep("Down", nrow(Weekly.test))
glm.pred[glm.probs > 0.50] <- "Up"
ct <- table(glm.pred, Weekly.test$Direction)
lda.fit <- lda(Direction ~ Lag2, data = Weekly, subset = train)
lda.class <- predict(lda.fit, Weekly.test)$class
ct <- table(lda.class,Weekly.test$Direction)
ct
qda.fit <- qda(Direction ~ Lag2, data = Weekly, subset = train)
qda.class <- predict(qda.fit, Weekly.test)$class
ct <- table(qda.class, Weekly.test$Direction)
train.X <- matrix(Lag2[train])
test.X <- matrix(Lag2[!train])
train.Direction <- Direction[train]
test.Direction <- Direction[!train]
set.seed(1)
knn.pred <- knn(train.X, test.X, train.Direction, k = 1)
ct <- table(knn.pred, test.Direction)
par(mfrow = c(2, 2))
glm.probs <- predict(logit.fit, Weekly.test, type="response")
Weekly.test$prob <- glm.probs
g <- roc(Direction ~ prob, data = Weekly.test)
plot(g, main = "Logistic Regression")
lda.probs <- predict(lda.fit, Weekly.test)$posterior
Weekly.test$prob <- lda.probs
g <- roc(Direction ~ prob, data = Weekly.test)
plot(g, main = "LDA")
qda.probs <- predict(qda.fit, Weekly.test)$posterior
Weekly.test$prob <- qda.probs
g <- roc(Direction ~ prob, data = Weekly.test)
plot(g, main = "QDA")
names(Weekly.test)
is(Weekly.test$Direction)
length(Weekly.test$Direction)
length(Weekly.test$prob)
dim(Weekly.test)
Weekly.test$prob
length(lda.probs)
names(lda.probs)
View(lda.probs)
rm(list = ls())
library(ISLR)
library(ggplot2)
library(MASS)
library(class)
library(pROC)
attach(Weekly)
train <- Year <= 2008
Weekly.test <- Weekly[!train, ]
logit.fit <- glm(Direction ~ Lag2, family = binomial, data = Weekly, subset = train)
glm.probs <- predict(logit.fit, Weekly.test, type="response")
glm.pred <- rep("Down", nrow(Weekly.test))
glm.pred[glm.probs > 0.50] <- "Up"
ct <- table(glm.pred, Weekly.test$Direction)
lda.fit <- lda(Direction ~ Lag2, data = Weekly, subset = train)
lda.class <- predict(lda.fit, Weekly.test)$class
ct <- table(lda.class,Weekly.test$Direction)
ct
qda.fit <- qda(Direction ~ Lag2, data = Weekly, subset = train)
qda.class <- predict(qda.fit, Weekly.test)$class
ct <- table(qda.class, Weekly.test$Direction)
train.X <- matrix(Lag2[train])
test.X <- matrix(Lag2[!train])
train.Direction <- Direction[train]
test.Direction <- Direction[!train]
set.seed(1)
knn.pred <- knn(train.X, test.X, train.Direction, k = 1)
ct <- table(knn.pred, test.Direction)
par(mfrow = c(2, 2))
glm.probs <- predict(logit.fit, Weekly.test, type="response")
Weekly.test$prob <- glm.probs[, 2]
g <- roc(Direction ~ prob, data = Weekly.test)
plot(g, main = "Logistic Regression")
lda.probs <- predict(lda.fit, Weekly.test)$posterior
Weekly.test$prob <- lda.probs[, 2]
g <- roc(Direction ~ prob, data = Weekly.test)
plot(g, main = "LDA")
qda.probs <- predict(qda.fit, Weekly.test)$posterior
Weekly.test$prob <- qda.probs[, 2]
g <- roc(Direction ~ prob, data = Weekly.test)
plot(g, main = "QDA")
plot.new()
rm(list = ls())
library(ISLR)
library(ggplot2)
library(MASS)
library(class)
library(pROC)
attach(Weekly)
train <- Year <= 2008
Weekly.test <- Weekly[!train, ]
logit.fit <- glm(Direction ~ Lag2, family = binomial, data = Weekly, subset = train)
glm.probs <- predict(logit.fit, Weekly.test, type="response")
glm.pred <- rep("Down", nrow(Weekly.test))
glm.pred[glm.probs > 0.50] <- "Up"
ct <- table(glm.pred, Weekly.test$Direction)
lda.fit <- lda(Direction ~ Lag2, data = Weekly, subset = train)
lda.class <- predict(lda.fit, Weekly.test)$class
ct <- table(lda.class,Weekly.test$Direction)
ct
qda.fit <- qda(Direction ~ Lag2, data = Weekly, subset = train)
qda.class <- predict(qda.fit, Weekly.test)$class
ct <- table(qda.class, Weekly.test$Direction)
train.X <- matrix(Lag2[train])
test.X <- matrix(Lag2[!train])
train.Direction <- Direction[train]
test.Direction <- Direction[!train]
set.seed(1)
knn.pred <- knn(train.X, test.X, train.Direction, k = 1)
ct <- table(knn.pred, test.Direction)
par(mfrow = c(2, 2))
glm.probs <- predict(logit.fit, Weekly.test, type="response")
Weekly.test$prob <- glm.probs[, 2]
g <- roc(Direction ~ prob, data = Weekly.test)
plot(g, main = "Logistic Regression")
lda.probs <- predict(lda.fit, Weekly.test)$posterior
Weekly.test$prob <- lda.probs[, 2]
g <- roc(Direction ~ prob, data = Weekly.test)
plot(g, main = "LDA")
qda.probs <- predict(qda.fit, Weekly.test)$posterior
Weekly.test$prob <- qda.probs[, 2]
g <- roc(Direction ~ prob, data = Weekly.test)
plot(g, main = "QDA")
