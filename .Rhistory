lambda = lasso.bestlam)
lasso.pred <- predict(lasso.mod,
s = lasso.bestlam,
newx = model.matrix(log_area ~ ., test.Data)[,-1])
lasso.coef <- predict(lasso.mod,
type = "coefficients",
s = lasso.bestlam)[1:14,]
list("Lambda" = lasso.bestlam,
"MSE" = mean((lasso.pred - test.Data$log_area)^2),
"Non-zero Coefficient Estimates" = lasso.coef[lasso.coef != 0],
"Name of Variables with Zero Coefficient Estimates" =
names(lasso.coef)[which(lasso.coef == 0)])
# (f).
set.seed(1)
pcr.fit <- pcr(log_area ~ .,
Data = train.Data,
scale = TRUE,
validation = "CV")
validationplot(pcr.fit,
val.type = "MSEP")
M.ind <- which.min(RMSEP(pcr.fit)$val[1, 1, ])
best.pcr.fit <- attr(RMSEP(pcr.fit)$val, "dimnames")$model[M.ind]
M <- as.numeric(gsub("([0-9]+).*$", "\\1", best.pcr.fit))
pcr.pred <- predict(pcr.fit,
model.matrix(log_area ~ ., test.Data)[,-1],
ncomp = M)
mean((pcr.pred - test.Data$log_area)^2)
# (g)
set.seed(1)
plsr.fit <- plsr(log_area ~ .,
Data = train.Data,
scale = TRUE,
validation = "CV")
validationplot(plsr.fit,
val.type = "MSEP")
M.ind <- which.min(RMSEP(plsr.fit)$val[1, 1, ])
best.plsr.fit <- attr(RMSEP(plsr.fit)$val, "dimnames")$model[M.ind]
M <- as.numeric(gsub("([0-9]+).*$", "\\1", best.pcr.fit))
plsr.pred <- predict(plsr.fit,
model.matrix(log_area ~ ., test.Data)[,-1],
ncomp = M)
mean((plsr.pred - test.Data$log_area)^2)
# (a)
set.seed(1)
train=sample(c(TRUE,FALSE), nrow(Data),rep=TRUE)
train.Data <- Data[train, ]
test.Data <- Data[!train, ]
# (b)
lm.fit_2 <- lm(log_area ~ .,
data = train.Data)
lm.pred_2 <- predict(object = lm.fit_2,
newdata = subset(test.Data, select = -log_area))
mean((lm.pred_2 - test.Data$log_area)^2)
# (c)
predict.regsubsets <- function(object,newdata,id,...){
form <- as.formula(object$call[[2]])
mat <- model.matrix(form,newdata)
coefi <- coef(object, id = id)
xvars <- names(coefi)
mat[, xvars]%*%coefi
}
k <- 10    #set number of fold
set.seed(1)
folds=sample(1:k,
nrow(train.Data),
replace = TRUE)
cv.errors <- matrix(NA,
k,
13,
dimnames=list(NULL, paste(1:13)))
for(j in 1:k){
best.fit <- regsubsets(log_area ~ .,
data=train.Data[folds != j, ],
nvmax=13)
for(i in 1:13){
pred <- predict(best.fit,
train.Data[folds == j, ],
id = i)
cv.errors[j,i] <- mean( ( train.Data$log_area[folds == j] - pred )^2 )
}
}
mean.cv.errors <- apply(cv.errors, 2, mean)
best.ind <- which.min(mean.cv.errors)
reg.best=regsubsets(log_area ~ . ,
data=train.Data,
nvmax=13)
list("Number of Variables" = length(coef(reg.best, best.ind)),
"Name of Variables" = attr(coef(reg.best, best.ind), "names"),
"Coefficients of Variables" = coef(reg.best, best.ind),
"MSE" = min(mean.cv.errors))
# (d).
set.seed(1)
ridge.cv.out <- cv.glmnet(x = model.matrix(log_area ~ ., train.Data)[,-1],
y = train.Data$log_area,
alpha = 0)
ridge.bestlam <- ridge.cv.out$lambda.min
ridge.mod <- glmnet(x = model.matrix(log_area ~ ., train.Data)[,-1],
y = train.Data$log_area,
alpha = 0,
lambda = ridge.bestlam)
ridge.pred <- predict(ridge.mod,
s = ridge.bestlam,
newx = model.matrix(log_area ~ ., test.Data)[,-1])
list("Lambda" = ridge.bestlam,
"MSE" = mean((ridge.pred - test.Data$log_area)^2))
# (e).
set.seed(1)
lasso.cv.out <- cv.glmnet(x = model.matrix(log_area ~ ., train.Data)[,-1],
y = train.Data$log_area,
alpha = 1)
lasso.bestlam <- lasso.cv.out$lambda.min
lasso.mod <- glmnet(x = model.matrix(log_area ~ ., train.Data)[,-1],
y = train.Data$log_area,
alpha = 1,
lambda = lasso.bestlam)
lasso.pred <- predict(lasso.mod,
s = lasso.bestlam,
newx = model.matrix(log_area ~ ., test.Data)[,-1])
lasso.coef <- predict(lasso.mod,
type = "coefficients",
s = lasso.bestlam)[1:14,]
list("Lambda" = lasso.bestlam,
"MSE" = mean((lasso.pred - test.Data$log_area)^2),
"Non-zero Coefficient Estimates" = lasso.coef[lasso.coef != 0],
"Name of Variables with Zero Coefficient Estimates" =
names(lasso.coef)[which(lasso.coef == 0)])
# (f).
set.seed(1)
pcr.fit <- pcr(log_area ~ .,
data = train.Data,
scale = TRUE,
validation = "CV")
validationplot(pcr.fit,
val.type = "MSEP")
M.ind <- which.min(RMSEP(pcr.fit)$val[1, 1, ])
best.pcr.fit <- attr(RMSEP(pcr.fit)$val, "dimnames")$model[M.ind]
M <- as.numeric(gsub("([0-9]+).*$", "\\1", best.pcr.fit))
pcr.pred <- predict(pcr.fit,
model.matrix(log_area ~ ., test.Data)[,-1],
ncomp = M)
mean((pcr.pred - test.Data$log_area)^2)
# (g)
set.seed(1)
plsr.fit <- plsr(log_area ~ .,
data = train.Data,
scale = TRUE,
validation = "CV")
validationplot(plsr.fit,
val.type = "MSEP")
M.ind <- which.min(RMSEP(plsr.fit)$val[1, 1, ])
best.plsr.fit <- attr(RMSEP(plsr.fit)$val, "dimnames")$model[M.ind]
M <- as.numeric(gsub("([0-9]+).*$", "\\1", best.pcr.fit))
plsr.pred <- predict(plsr.fit,
model.matrix(log_area ~ ., test.Data)[,-1],
ncomp = M)
mean((plsr.pred - test.Data$log_area)^2)
# (d).
set.seed(1)
ridge.cv.out <- cv.glmnet(x = model.matrix(log_area ~ ., train.Data)[,-1],
y = train.Data$log_area,
alpha = 0)
ridge.bestlam <- ridge.cv.out$lambda.min
ridge.mod <- glmnet(x = model.matrix(log_area ~ ., train.Data)[,-1],
y = train.Data$log_area,
alpha = 0,
lambda = ridge.bestlam)
ridge.pred <- predict(ridge.mod,
s = ridge.bestlam,
newx = model.matrix(log_area ~ ., test.Data)[,-1])
list("Lambda" = ridge.bestlam,
"MSE" = mean((ridge.pred - test.Data$log_area)^2))
# (e).
set.seed(1)
lasso.cv.out <- cv.glmnet(x = model.matrix(log_area ~ ., train.Data)[,-1],
y = train.Data$log_area,
alpha = 1)
lasso.bestlam <- lasso.cv.out$lambda.min
lasso.mod <- glmnet(x = model.matrix(log_area ~ ., train.Data)[,-1],
y = train.Data$log_area,
alpha = 1,
lambda = lasso.bestlam)
lasso.pred <- predict(lasso.mod,
s = lasso.bestlam,
newx = model.matrix(log_area ~ ., test.Data)[,-1])
lasso.coef <- predict(lasso.mod,
type = "coefficients",
s = lasso.bestlam)[1:14,]
list("Lambda" = lasso.bestlam,
"MSE" = mean((lasso.pred - test.Data$log_area)^2),
"Non-zero Coefficient Estimates" = lasso.coef[lasso.coef != 0],
"Name of Variables with Zero Coefficient Estimates" =
names(lasso.coef)[which(lasso.coef == 0)])
# (f).
set.seed(1)
pcr.fit <- pcr(log_area ~ .,
data = train.Data,
scale = TRUE,
validation = "CV")
validationplot(pcr.fit,
val.type = "MSEP")
M.ind <- which.min(RMSEP(pcr.fit)$val[1, 1, ])
best.pcr.fit <- attr(RMSEP(pcr.fit)$val, "dimnames")$model[M.ind]
M <- as.numeric(gsub("([0-9]+).*$", "\\1", best.pcr.fit))
pcr.pred <- predict(pcr.fit,
model.matrix(log_area ~ ., test.Data)[,-1],
ncomp = M)
mean((pcr.pred - test.Data$log_area)^2)
# (g)
set.seed(1)
plsr.fit <- plsr(log_area ~ .,
data = train.Data,
scale = TRUE,
validation = "CV")
validationplot(plsr.fit,
val.type = "MSEP")
M.ind <- which.min(RMSEP(plsr.fit)$val[1, 1, ])
best.plsr.fit <- attr(RMSEP(plsr.fit)$val, "dimnames")$model[M.ind]
M <- as.numeric(gsub("([0-9]+).*$", "\\1", best.pcr.fit))
plsr.pred <- predict(plsr.fit,
model.matrix(log_area ~ ., test.Data)[,-1],
ncomp = M)
mean((plsr.pred - test.Data$log_area)^2)
pcr.fit <- pcr(log_area ~ .,
data = train.Data,
scale = TRUE,
validation = "CV")
scale(train.Data)
pcr.fit <- pcr(log_area ~ .,
data = train.Data[, c(-3, -4)],
scale = TRUE,
validation = "CV")
validationplot(pcr.fit,
val.type = "MSEP")
M.ind <- which.min(RMSEP(pcr.fit)$val[1, 1, ])
best.pcr.fit <- attr(RMSEP(pcr.fit)$val, "dimnames")$model[M.ind]
M <- as.numeric(gsub("([0-9]+).*$", "\\1", best.pcr.fit))
pcr.pred <- predict(pcr.fit,
model.matrix(log_area ~ ., test.Data)[,-1],
ncomp = M)
set.seed(1)
pcr.fit <- pcr(log_area ~ .,
data = train.Data[, c(-3, -4)],
scale = TRUE,
validation = "CV")
validationplot(pcr.fit,
val.type = "MSEP")
M.ind <- which.min(RMSEP(pcr.fit)$val[1, 1, ])
best.pcr.fit <- attr(RMSEP(pcr.fit)$val, "dimnames")$model[M.ind]
M <- as.numeric(gsub("([0-9]+).*$", "\\1", best.pcr.fit))
pcr.pred <- predict(pcr.fit,
model.matrix(log_area ~ ., test.Data[, c(-3, -4)])[,-13],
ncomp = M)
mean((pcr.pred - test.Data$log_area)^2)
pcr.fit <- pcr(log_area ~ .,
data = train.Data[, c(-3, -4)],
scale = TRUE,
validation = "CV")
validationplot(pcr.fit,
val.type = "MSEP")
M.ind <- which.min(RMSEP(pcr.fit)$val[1, 1, ])
best.pcr.fit <- attr(RMSEP(pcr.fit)$val, "dimnames")$model[M.ind]
M <- as.numeric(gsub("([0-9]+).*$", "\\1", best.pcr.fit))
pcr.pred <- predict(pcr.fit,
model.matrix(log_area ~ ., test.Data[, c(-3, -4, -13)]),
ncomp = M)
pcr.fit <- pcr(log_area ~ .,
data = train.Data[, c(-3, -4)],
scale = TRUE,
validation = "CV")
validationplot(pcr.fit,
val.type = "MSEP")
M.ind <- which.min(RMSEP(pcr.fit)$val[1, 1, ])
best.pcr.fit <- attr(RMSEP(pcr.fit)$val, "dimnames")$model[M.ind]
M <- as.numeric(gsub("([0-9]+).*$", "\\1", best.pcr.fit))
pcr.pred <- predict(pcr.fit,
model.matrix(log_area ~ ., test.Data[, c(-3, -4)]),
ncomp = M)
lasso.bestlam <- lasso.cv.out$lambda.min
lasso.mod <- glmnet(x = model.matrix(crim ~ ., train.Boston)[,-1],
y = train.Boston$crim,
alpha = 1,
lambda = lasso.bestlam)
lasso.pred <- predict(lasso.mod,
s = lasso.bestlam,
newx = model.matrix(crim ~ ., test.Boston)[,-1])
M <- as.numeric(gsub("([0-9]+).*$", "\\1", best.pcr.fit))
pcr.pred <- predict(pcr.fit,
model.matrix(log_area ~ ., test.Data[, c(-3, -4)])[, -13],
ncomp = M)
pcr.pred <- predict(pcr.fit,
model.matrix(log_area ~ ., test.Data)[, -13],
ncomp = M)
model.matrix(log_area ~ ., test.Data)[, -13]
set.seed(1)
plsr.fit <- plsr(log_area ~ .,
data = train.Data,
scale = TRUE,
validation = "CV")
validationplot(plsr.fit,
val.type = "MSEP")
M.ind <- which.min(RMSEP(plsr.fit)$val[1, 1, ])
best.plsr.fit <- attr(RMSEP(plsr.fit)$val, "dimnames")$model[M.ind]
M <- as.numeric(gsub("([0-9]+).*$", "\\1", best.pcr.fit))
plsr.pred <- predict(plsr.fit,
model.matrix(log_area ~ ., test.Data)[,-1],
ncomp = M)
mean((plsr.pred - test.Data$log_area)^2)
plsr.pred
summary(plsr.fit)
plsr.fit <- plsr(log_area ~ .,
data = train.Data[, c(-3, -4)],
scale = TRUE,
validation = "CV")
summary(plsr.fit)
plsr.pred <- predict(plsr.fit,
model.matrix(log_area ~ ., test.Data[, c(-3, -4)])[,-1],
ncomp = M)
mean((plsr.pred - test.Data$log_area)^2)
pcr.fit <- pcr(log_area ~ .,
data = train.Data[, c(-3, -4)],
scale = TRUE,
validation = "CV")
summary(pcr.fit)
M.ind <- which.min(RMSEP(pcr.fit)$val[1, 1, ])
best.pcr.fit <- attr(RMSEP(pcr.fit)$val, "dimnames")$model[M.ind]
M <- as.numeric(gsub("([0-9]+).*$", "\\1", best.pcr.fit))
M
pcr.pred <- predict(pcr.fit,
model.matrix(log_area ~ ., test.Data[, c(-3, -4)])[, -13],
ncomp = M)
pcr.pred <- predict(pcr.fit,
model.matrix(log_area ~ ., test.Data[, c(-3, -4)])[, -1],
ncomp = M)
model.matrix(log_area ~ ., test.Data[, c(-3, -4)])
names(                    model.matrix(log_area ~ ., test.Data[, c(-3, -4)]))
str(model.matrix(log_area ~ ., test.Data[, c(-3, -4)]))
# (d).
set.seed(1)
ridge.cv.out <- cv.glmnet(x = model.matrix(log_area ~ ., train.Data)[,-1],
y = train.Data$log_area,
alpha = 0)
ridge.bestlam <- ridge.cv.out$lambda.min
ridge.mod <- glmnet(x = model.matrix(log_area ~ ., train.Data)[,-1],
y = train.Data$log_area,
alpha = 0,
lambda = ridge.bestlam)
ridge.pred <- predict(ridge.mod,
s = ridge.bestlam,
newx = model.matrix(log_area ~ ., test.Data)[,-1])
list("Lambda" = ridge.bestlam,
"MSE" = mean((ridge.pred - test.Data$log_area)^2))
# (e).
set.seed(1)
lasso.cv.out <- cv.glmnet(x = model.matrix(log_area ~ ., train.Data)[,-1],
y = train.Data$log_area,
alpha = 1)
lasso.bestlam <- lasso.cv.out$lambda.min
lasso.mod <- glmnet(x = model.matrix(log_area ~ ., train.Data)[,-1],
y = train.Data$log_area,
alpha = 1,
lambda = lasso.bestlam)
lasso.pred <- predict(lasso.mod,
s = lasso.bestlam,
newx = model.matrix(log_area ~ ., test.Data)[,-1])
lasso.coef <- predict(lasso.mod,
type = "coefficients",
s = lasso.bestlam)[1:14,]
list("Lambda" = lasso.bestlam,
"MSE" = mean((lasso.pred - test.Data$log_area)^2),
"Non-zero Coefficient Estimates" = lasso.coef[lasso.coef != 0],
"Name of Variables with Zero Coefficient Estimates" =
names(lasso.coef)[which(lasso.coef == 0)])
# (f).
set.seed(1)
pcr.fit <- pcr(log_area ~ .,
data = train.Data[, c(-3, -4)],
scale = TRUE,
validation = "CV")
validationplot(pcr.fit,
val.type = "MSEP")
M.ind <- which.min(RMSEP(pcr.fit)$val[1, 1, ])
best.pcr.fit <- attr(RMSEP(pcr.fit)$val, "dimnames")$model[M.ind]
M <- as.numeric(gsub("([0-9]+).*$", "\\1", best.pcr.fit))
pcr.pred <- predict(pcr.fit,
model.matrix(log_area ~ ., test.Data[, c(-3, -4)])[, -1],
ncomp = M)
mean((pcr.pred - test.Data$log_area)^2)
# (g)
set.seed(1)
plsr.fit <- plsr(log_area ~ .,
data = train.Data[, c(-3, -4)],
scale = TRUE,
validation = "CV")
validationplot(plsr.fit,
val.type = "MSEP")
M.ind <- which.min(RMSEP(plsr.fit)$val[1, 1, ])
best.plsr.fit <- attr(RMSEP(plsr.fit)$val, "dimnames")$model[M.ind]
M <- as.numeric(gsub("([0-9]+).*$", "\\1", best.pcr.fit))
plsr.pred <- predict(plsr.fit,
model.matrix(log_area ~ ., test.Data[, c(-3, -4)])[,-1],
ncomp = M)
mean((plsr.pred - test.Data$log_area)^2)
M
> M <- as.numeric(gsub("([0-9]+).*$", "\\1", best.pcr.fit))
set.seed(1)
plsr.fit <- plsr(crim ~ .,
data = train.Boston,
scale = TRUE,
validation = "CV")
validationplot(plsr.fit,
val.type = "MSEP")
M.ind <- which.min(RMSEP(plsr.fit)$val[1, 1, ])
best.plsr.fit <- attr(RMSEP(plsr.fit)$val, "dimnames")$model[M.ind]
M <- as.numeric(gsub("([0-9]+).*$", "\\1", best.plsr.fit))
plsr.pred <- predict(plsr.fit,
model.matrix(crim ~ ., test.Boston)[,-1],
ncomp = M)
mean((plsr.pred - test.Boston$crim)^2)
M
# (d).
set.seed(1)
ridge.cv.out <- cv.glmnet(x = model.matrix(log_area ~ ., train.Data)[,-1],
y = train.Data$log_area,
alpha = 0)
ridge.bestlam <- ridge.cv.out$lambda.min
ridge.mod <- glmnet(x = model.matrix(log_area ~ ., train.Data)[,-1],
y = train.Data$log_area,
alpha = 0,
lambda = ridge.bestlam)
ridge.pred <- predict(ridge.mod,
s = ridge.bestlam,
newx = model.matrix(log_area ~ ., test.Data)[,-1])
list("Lambda" = ridge.bestlam,
"MSE" = mean((ridge.pred - test.Data$log_area)^2))
# (e).
set.seed(1)
lasso.cv.out <- cv.glmnet(x = model.matrix(log_area ~ ., train.Data)[,-1],
y = train.Data$log_area,
alpha = 1)
lasso.bestlam <- lasso.cv.out$lambda.min
lasso.mod <- glmnet(x = model.matrix(log_area ~ ., train.Data)[,-1],
y = train.Data$log_area,
alpha = 1,
lambda = lasso.bestlam)
lasso.pred <- predict(lasso.mod,
s = lasso.bestlam,
newx = model.matrix(log_area ~ ., test.Data)[,-1])
lasso.coef <- predict(lasso.mod,
type = "coefficients",
s = lasso.bestlam)[1:14,]
list("Lambda" = lasso.bestlam,
"MSE" = mean((lasso.pred - test.Data$log_area)^2),
"Non-zero Coefficient Estimates" = lasso.coef[lasso.coef != 0],
"Name of Variables with Zero Coefficient Estimates" =
names(lasso.coef)[which(lasso.coef == 0)])
# (f).
set.seed(1)
pcr.fit <- pcr(log_area ~ .,
data = train.Data[, c(-3, -4)],
scale = TRUE,
validation = "CV")
validationplot(pcr.fit,
val.type = "MSEP")
M.ind <- which.min(RMSEP(pcr.fit)$val[1, 1, ])
best.pcr.fit <- attr(RMSEP(pcr.fit)$val, "dimnames")$model[M.ind]
M <- as.numeric(gsub("([0-9]+).*$", "\\1", best.pcr.fit))
pcr.pred <- predict(pcr.fit,
model.matrix(log_area ~ ., test.Data[, c(-3, -4)])[, -1],
ncomp = M)
mean((pcr.pred - test.Data$log_area)^2)
# (g)
set.seed(1)
plsr.fit <- plsr(log_area ~ .,
data = train.Data[, c(-3, -4)],
scale = TRUE,
validation = "CV")
validationplot(plsr.fit,
val.type = "MSEP")
M.ind <- which.min(RMSEP(plsr.fit)$val[1, 1, ])
best.plsr.fit <- attr(RMSEP(plsr.fit)$val, "dimnames")$model[M.ind]
M <- as.numeric(gsub("([0-9]+).*$", "\\1", best.plsr.fit))
plsr.pred <- predict(plsr.fit,
model.matrix(log_area ~ ., test.Data[, c(-3, -4)])[,-1],
ncomp = M)
mean((plsr.pred - test.Data$log_area)^2)
best.plsr.fit
summary(plsr.fit)
set.seed(1)
plsr.fit <- plsr(log_area ~ .,
data = train.Data,
scale = TRUE,
validation = "CV")
validationplot(plsr.fit,
val.type = "MSEP")
M.ind <- which.min(RMSEP(plsr.fit)$val[1, 1, ])
best.plsr.fit <- attr(RMSEP(plsr.fit)$val, "dimnames")$model[M.ind]
M <- as.numeric(gsub("([0-9]+).*$", "\\1", best.plsr.fit))
plsr.pred <- predict(plsr.fit,
model.matrix(log_area ~ ., test.Data[,-1],
ncomp = M)
mean((plsr.pred - test.Data$log_area)^2)
M.ind
plsr.fit <- plsr(log_area ~ .,
data = train.Data,
scale = TRUE,
validation = "CV")
warning()
plsr.fit <- plsr(log_area ~ .,
data = train.Data,
scale = TRUE,
validation = "CV")
summary(plsr.fit)
