K = 5)$delta[2]
names(cvError)[n] <- paste(regressor[as.logical(indices[n, ])],
collapse = " + ")
}
best <- names(which.min(cvError))
best.lm <- lm(as.formula(paste("pages", best, sep = " ~ ")),
data = pages)
res <- resid(best.lm)
yhat <- predict(best.lm)
plot(yhat, res)
#4
des <- read.table(file = "./des_site1and2sp_2.dat",
col.names = c("glu",
"nud",
"utmn",
"utme",
"sw",
"elevation",
"slope",
"geology",
"LTA",
"ELT",
"site",
"subplot"))
attach(des)
glu <- as.factor(glu)
geology <- as.factor(geology)
LTA <- as.factor(LTA)
ELT <- as.factor(ELT)
site <- as.factor(site)
costFunction <- function(y, yhat) return(mean(y != (yhat > 0.5)))
cvError.inter <- rep(NA, 15)
cvError.noint <- rep(NA, 15)
n <- 1
for (i in 5:9){
for (j in (i+1):10){
glmformula.inter <- as.formula(
paste("glu ~ (",
paste(names(des)[c(i, j)],
collapse = " + "),
")^2"
)
)
glmformula.noint <- as.formula(
paste("glu ~ ",
paste(names(des)[c(i, j)],
collapse = " + ")
)
)
logis.fit.inter <- glm(glmformula.inter,
family = "binomial",
data = des)
logis.fit.noint <- glm(glmformula.noint,
family = "binomial",
data = des)
cvError.inter[n] <- cv.glm(data = des,
glmfit = logis.fit.inter,
cost = costFunction,
K = 10)$delta[1]
cvError.noint[n] <- cv.glm(data = des,
glmfit = logis.fit.noint,
cost = costFunction,
K = 10)$delta[1]
names(cvError.inter)[n] <- paste(
as.character(glmformula.inter)[2],
as.character(glmformula.inter)[1],
as.character(glmformula.inter)[3],
collapse = " ")
names(cvError.noint)[n] <- paste(
as.character(glmformula.noint)[2],
as.character(glmformula.noint)[1],
as.character(glmformula.noint)[3],
collapse = " ")
n <- n + 1
}
}
best.inter <- min(cvError.inter)
best.noint <- min(cvError.noint)
names(best.inter) <- names(cvError.inter)[which.min(cvError.inter)]
names(best.noint) <- names(cvError.noint)[which.min(cvError.inter)]
update.packages("parallel")
str(mean.boot)
mean.boot$t0
mean.boot
mean.boot$t
mean.boot
str(mean.boot)
mean.boot$R
cvError
head(cvError)
tail(cverror)
tail(cvError)
best
best <- min(cvError)
best
best <- cvError[which.min(cvError))]
best <- cvError[which.min(cvError)]
best
?head
?sort
?head
shapiro.test(res)
str(shapiro.test(res))
shapiro.test(rnorm(100, mean = 5, sd = 3))
shapiro.test(runif(100, min = 2, max = 4))
regressor <- c(names(pages)[3],
names(pages)[4],
names(pages)[5],
paste(names(pages)[3],
names(pages)[4],
sep = "*"),
paste(names(pages)[3],
names(pages)[5],
sep = "*"),
paste(names(pages)[4],
names(pages)[5],
sep = "*"),
paste(names(pages)[3],
names(pages)[4],
names(pages)[5],
sep = "*"))
indices <- expand.grid(c(TRUE, FALSE),
c(TRUE, FALSE),
c(TRUE, FALSE),
c(TRUE, FALSE),
c(TRUE, FALSE),
c(TRUE, FALSE),
c(TRUE, FALSE)
)
cvError <- rep(NA, 127)
for (n in 1:127){
lmformula <- reformulate(regressor[as.logical(indices[n, ])],
response = "pages")
glm.fit <- glm(lmformula, data = pages)
cvError[n] <- cv.glm(data = pages,
glmfit = glm.fit,
K = 5)$delta[2]
names(cvError)[n] <- paste(regressor[as.logical(indices[n, ])],
collapse = "+")
}
best <- cvError[which.min(cvError)]
best.lm <- lm(as.formula(paste("pages", names(best), sep = "~")),
data = pages)
res <- resid(best.lm)
yhat <- predict(best.lm)
plot(yhat, res)
outlierTest(best.lm)
best
library(car)
regressor <- c(names(pages)[3],
names(pages)[4],
names(pages)[5],
paste(names(pages)[3],
names(pages)[4],
sep = "*"),
paste(names(pages)[3],
names(pages)[5],
sep = "*"),
paste(names(pages)[4],
names(pages)[5],
sep = "*"),
paste(names(pages)[3],
names(pages)[4],
names(pages)[5],
sep = "*"))
indices <- expand.grid(c(TRUE, FALSE),
c(TRUE, FALSE),
c(TRUE, FALSE),
c(TRUE, FALSE),
c(TRUE, FALSE),
c(TRUE, FALSE),
c(TRUE, FALSE)
)
cvError <- rep(NA, 127)
for (n in 1:127){
lmformula <- reformulate(regressor[as.logical(indices[n, ])],
response = "pages")
glm.fit <- glm(lmformula, data = pages)
cvError[n] <- cv.glm(data = pages,
glmfit = glm.fit,
K = 5)$delta[2]
names(cvError)[n] <- paste(regressor[as.logical(indices[n, ])],
collapse = "+")
}
best <- cvError[which.min(cvError)]
best.lm <- lm(as.formula(paste("pages", names(best), sep = "~")),
data = pages)
res <- resid(best.lm)
yhat <- predict(best.lm)
plot(yhat, res)
outlierTest(best.lm)
best
pair(des[c(5:10)], col = c("red", "black")[glu])
pairs(des[c(5:10)], col = c("red", "black")[glu])
pairs(des[c(5:10)], col = c("red", "black")[glu], pch = 20)
geology
regressor <- names(des[5:10])
regressor
indices <- expand.grid(c(TRUE, FALSE),
c(TRUE, FALSE),
c(TRUE, FALSE),
c(TRUE, FALSE),
c(TRUE, FALSE),
c(TRUE, FALSE)
)
cvError <- rep(NA, 63)
for (n in 1:127){
lmformula <- reformulate(regressor[as.logical(indices[n, ])],
response = "pages")
glm.fit <- glm(lmformula, data = pages)
cvError[n] <- cv.glm(data = pages,
glmfit = glm.fit,
K = 5)$delta[2]
names(cvError)[n] <- paste(regressor[as.logical(indices[n, ])],
collapse = "+")
}
n
as.logical(indices[n, ])
regressor[as.logical(indices[n, ])]
reformulate(regressor[as.logical(indices[n, ])],
response = "pages")
regressor <- names(des[5:10])
indices <- expand.grid(c(TRUE, FALSE),
c(TRUE, FALSE),
c(TRUE, FALSE),
c(TRUE, FALSE),
c(TRUE, FALSE),
c(TRUE, FALSE)
)
cvError <- rep(NA, 63)
for (n in 1:127){
lmformula <- reformulate(regressor[as.logical(indices[n, ])],
response = "glu")
glm.fit <- glm(lmformula, data = pages)
cvError[n] <- cv.glm(data = pages,
glmfit = glm.fit,
K = 5)$delta[2]
names(cvError)[n] <- paste(regressor[as.logical(indices[n, ])],
collapse = "+")
}
reformulate(regressor[as.logical(indices[n, ])],
response = "glu")
lmformula <- reformulate(regressor[as.logical(indices[n, ])],
response = "glu")
cvError.lin <- rep(NA, 63)
for (n in 1:127){
lmformula <- reformulate(regressor[as.logical(indices[n, ])],
response = "glu")
glm.fit <- glm(lmformula, data = des)
cvError.lin[n] <- cv.glm(data = des,
glmfit = glm.fit,
K = 10)$delta[2]
names(cvError.lin)[n] <- paste(regressor[as.logical(indices[n, ])],
collapse = "+")
}
n
reformulate(regressor[as.logical(indices[n, ])],
response = "glu")
regressor[as.logical(indices[n, ])]
regressor <- names(des[5:10])
indices <- expand.grid(c(TRUE, FALSE),
c(TRUE, FALSE),
c(TRUE, FALSE),
c(TRUE, FALSE),
c(TRUE, FALSE),
c(TRUE, FALSE)
)
cvError.lin <- rep(NA, 63)
for (n in 1:63){
lmformula <- reformulate(regressor[as.logical(indices[n, ])],
response = "glu")
glm.fit <- glm(lmformula, data = des)
cvError.lin[n] <- cv.glm(data = des,
glmfit = glm.fit,
K = 10)$delta[2]
names(cvError.lin)[n] <- paste(regressor[as.logical(indices[n, ])],
collapse = "+")
}
best.lin <- min(cvError.lin)
names(best.lin) <- names(cvError.lin)[which.min(cvError.lin)]
best.lin
cvError.lin <- rep(NA, 63)
for (n in 1:63){
lmformula <- reformulate(regressor[as.logical(indices[n, ])],
response = "glu")
glm.fit <- glm(lmformula, data = des)
cvError.lin[n] <- cv.glm(data = des,
glmfit = glm.fit,
K = 5)$delta[2]
names(cvError.lin)[n] <-
paste(regressor[as.logical(indices[n, ])], collapse = "+")
}
best.lin <- min(cvError.lin)
names(best.lin) <- names(cvError.lin)[which.min(cvError.lin)]
best.lin
c(TRUE, FALSE),
c(TRUE, FALSE),
c(TRUE, FALSE),
c(TRUE, FALSE),
c(TRUE, FALSE)
)
cvError.lin <- rep(NA, 63)
for (n in 1:63){
lmformula <- reformulate(regressor[as.logical(indices[n, ])],
response = "glu")
glm.fit <- glm(lmformula, data = des)
cvError.lin[n] <- cv.glm(data = des,
glmfit = glm.fit,
K = 2)$delta[2]
names(cvError.lin)[n] <-
paste(regressor[as.logical(indices[n, ])], collapse = "+")
}
best.lin <- min(cvError.lin)
names(best.lin) <- names(cvError.lin)[which.min(cvError.lin)]
best.lin
glm.fit <- glm(glu~(sw+elevation+slope+LTA)^2, data = des)
cvError.4.inter <- cv.glm(data = des,
glmfit = glm.fit,
K = 10)$delta[2]
cvError.4.inter
glm.fit <- glm(glu~sw+elevation+slope+LTA+geology*ELT, data = des)
cvError.6.inter <- cv.glm(data = des,
glmfit = glm.fit,
K = 10)$delta[2]
cvError.6.inter
glm.fit <- glm(glu~sw+slope+LTA+geology*ELT, data = des)
cvError.6.inter <- cv.glm(data = des,
glmfit = glm.fit,
K = 10)$delta[2]
cvError.6.inter
glm.fit <- glm(glu~sw+elevation+slope+LTA+sw*ELT, data = des)
cvError.6.inter <- cv.glm(data = des,
glmfit = glm.fit,
K = 10)$delta[2]
cvError.6.inter
glm.fit <- glm(glu~sw+elevation+slope+LTA+geology*ELT, data = des)
cvError.6.inter <- cv.glm(data = des,
glmfit = glm.fit,
K = 10)$delta[2]
cvError.6.inter
glm.fit <- glm(glu~sw+elevation+slope+LTA+geology*ELT, data = des)
cvError.6.inter <- cv.glm(data = des,
glmfit = glm.fit,
K = 10)$delta[2]
cvError.6.inter
glm.fit <- glm(glu~sw+elevation+slope+LTA+geology*ELT, data = des)
cvError.6.inter <- cv.glm(data = des,
glmfit = glm.fit,
K = 10)$delta[2]
cvError.6.inter
glm.fit <- glm(glu~sw+elevation+slope+LTA+sw*ELT, data = des)
cvError.6.inter <- cv.glm(data = des,
glmfit = glm.fit,
K = 10)$delta[2]
cvError.6.inter
glm.fit <- glm(glu~sw+elevation+slope+LTA+sw*ELT, data = des)
cvError.6.inter <- cv.glm(data = des,
glmfit = glm.fit,
K = 10)$delta[2]
cvError.6.inter
glm.fit <- glm(glu~sw+elevation+slope+LTA+sw*ELT, data = des)
cvError.6.inter <- cv.glm(data = des,
glmfit = glm.fit,
K = 10)$delta[2]
cvError.6.inter
glm.fit <- glm(glu~sw+elevation+slope+LTA+sw*ELT, data = des)
cvError.6.inter <- cv.glm(data = des,
glmfit = glm.fit,
K = 10)$delta[2]
cvError.6.inter
glm.fit <- glm(glu~sw+elevation+slope+LTA+sw*ELT, data = des)
cvError.6.inter <- cv.glm(data = des,
glmfit = glm.fit,
K = 10)$delta[2]
cvError.6.inter
glm.fit <- glm(glu~sw+elevation+slope+LTA+sw*ELT, data = des)
cvError.6.inter <- cv.glm(data = des,
glmfit = glm.fit,
K = 10)$delta[2]
cvError.1
glm.fit <- glm(glu~sw+elevation+slope+LTA+elevation*ELT, data = des)
cvError.6.inter <- cv.glm(data = des,
glmfit = glm.fit,
K = 10)$delta[2]
cvError.2
glm.fit <- glm(glu~sw+elevation+slope+LTA+slope*ELT, data = des)
cvError.6.inter <- cv.glm(data = des,
glmfit = glm.fit,
glm.fit <- glm(glu~sw+elevation+slope+LTA+sw*ELT, data = des)
cvError.1.inter <- cv.glm(data = des,
glmfit = glm.fit,
K = 10)$delta[2]
cvError.1
glm.fit <- glm(glu~sw+elevation+slope+LTA+elevation*ELT, data = des)
cvError.2.inter <- cv.glm(data = des,
glmfit = glm.fit,
K = 10)$delta[2]
glm.fit <- glm(glu~sw+elevation+slope+LTA+sw*ELT, data = des)
cvError.1.inter <- cv.glm(data = des,
glmfit = glm.fit,
K = 10)$delta[2]
cvError.1
glm.fit <- glm(glu~sw+elevation+slope+LTA+sw*ELT, data = des)
cvError.1 <- cv.glm(data = des,
glmfit = glm.fit,
K = 10)$delta[2]
cvError.1
glm.fit <- glm(glu~sw+elevation+slope+LTA+sw*ELT, data = des)
cvError.1 <- cv.glm(data = des,
glmfit = glm.fit,
K = 10)$delta[2]
cvError.1
glm.fit <- glm(glu~sw+elevation+slope+LTA+elevation*ELT, data = des)
cvError.2 <- cv.glm(data = des,
glmfit = glm.fit,
K = 10)$delta[2]
cvError.2
glm.fit <- glm(glu~sw+elevation+slope+LTA+slope*ELT, data = des)
cvError.3 <- cv.glm(data = des,
glmfit = glm.fit,
K = 10)$delta[2]
cvError.3
glm.fit <- glm(glu~sw+elevation+slope+LTA+sw*ELT, data = des)
cvError.1 <- cv.glm(data = des,
glmfit = glm.fit,
K = 10)$delta[2]
cvError.1
glm.fit <- glm(glu~sw+elevation+slope+LTA+elevation*ELT, data = des)
cvError.2 <- cv.glm(data = des,
glmfit = glm.fit,
K = 10)$delta[2]
cvError.2
glm.fit <- glm(glu~sw+elevation+slope+LTA+slope*ELT, data = des)
cvError.3 <- cv.glm(data = des,
glmfit = glm.fit,
K = 10)$delta[2]
cvError.3
glm.fit <- glm(glu~sw+elevation+slope+LTA+LTA*ELT, data = des)
cvError.4 <- cv.glm(data = des,
glmfit = glm.fit,
K = 10)$delta[2]
cvError.4
formula(glu~(sw+elevation+slope+LTA+geology+ELT)^2)
glm.fit <- glm(glu~(sw+elevation+slope+LTA+geology+ELT)^2, data = des)
cvError.6.inter <- cv.glm(data = des,
glmfit = glm.fit,
K = 10)$delta[2]
cvError.6.inter
regressor <- c(names(pages)[3],
names(pages)[4],
names(pages)[5]
)
indices <- expand.grid(c(TRUE, FALSE),
c(TRUE, FALSE),
c(TRUE, FALSE)
)
cvError <- rep(NA, 7)
for (n in 1:7){
lmformula <- reformulate(regressor[as.logical(indices[n, ])],
response = "pages")
glm.fit <- glm(lmformula, data = pages)
cvError[n] <- cv.glm(data = pages,
glmfit = glm.fit,
K = 5)$delta[2]
names(cvError)[n] <- paste(regressor[as.logical(indices[n, ])],
collapse = " + ")
}
best <- names(which.min(cvError))
best.lm <- lm(as.formula(paste("pages", best, sep = " ~ ")),
data = pages)
best
cvError
regressor <- c(names(pages)[3],
names(pages)[4],
names(pages)[5],
paste(names(pages)[3],
names(pages)[4],
sep = " * "),
paste(names(pages)[3],
names(pages)[5],
sep = " * "),
paste(names(pages)[4],
names(pages)[5],
sep = " * "),
paste(names(pages)[3],
names(pages)[4],
names(pages)[5],
sep = " * "))
indices <- expand.grid(c(TRUE, FALSE),
c(TRUE, FALSE),
c(TRUE, FALSE),
c(TRUE, FALSE),
c(TRUE, FALSE),
c(TRUE, FALSE),
c(TRUE, FALSE)
)
cvError <- rep(NA, 127)
for (n in 1:127){
lmformula <- reformulate(regressor[as.logical(indices[n, ])],
response = "pages")
glm.fit <- glm(lmformula, data = pages)
cvError[n] <- cv.glm(data = pages,
glmfit = glm.fit,
K = 5)$delta[2]
names(cvError)[n] <- paste(regressor[as.logical(indices[n, ])],
collapse = " + ")
}
best <- names(which.min(cvError))
best.lm <- lm(as.formula(paste("pages", best, sep = " ~ ")),
data = pages)
min(cvError)
best
