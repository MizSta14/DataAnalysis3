log(f_obj(y[t-1])) -
log(f_prop(y_prop, y[t-1])) +
log(f_prop(y[t-1], y_prop))
R <- exp(logR)
u <- runif(1)        ## uniform variable to determine acceptance
if(u < R){           ## accept the new value
y[t] <- y_prop
accepted <- c(accepted,1)
}
else{
y[t] <- y[t-1]      ## reject the new value
accepted <- c(accepted,0)
}
}
return(list(y, accepted))
}
r_prop_2 <- function(y){
return(rbeta(1, 3*y, 3-3*y))
}
f_prop_2 <- function(y1, y2){
return(dbeta(y1, 3*y2, 3-3*y2))
}
SampleResult <- Metropolis(f_obj = mypdf,
r_prop = r_prop_2,
f_prop = f_prop_2,
init = 0.5)
mean(SampleResult[[2]])
plot(SampleResult[[1]], type = "l")
p <- ggplot()
p + geom_line(mapping = aes(x = 501:1000, y = SampleResult[[1]][502:1001]))
p <- ggplot()
p + geom_line(mapping = aes(x = 501:1000, y = SampleResult[[1]][502:1001]))
+ labs(x = "Number")
+ labs(y = "Y")
p <- ggplot()
p + geom_line(mapping = aes(x = 501:1000, y = SampleResult[[1]][502:1001])) +
labs(x = "Number") +
labs(y = "Y")
p <- ggplot()
p + geom_line(mapping = aes(x = 501:1000, y = SampleResult[[1]][502:1001])) +
labs(x = "Number") +
labs(y = "Y") +
labs(title = "Metropolis-Hastings Sampling")
?labs
?geom_line
install.packages("rstan")
library(rstan)
?monitor
?wilcox.test
pscl
libaray(pscl)
library(pscl)
install.packages("pscl")
?rinvgam
?rigamma
rigamma
library(pscl)
rigamma
schools <- list(estimate = c(28, 8, -3, 7, -1, 1, 18, 12),
est_sd = c(15, 10, 16, 11, 9, 11, 10, 18),
name = c("A", "B", "C", "D", "E", "F", "G", "H"))
schools
?rigamma
rigamma
library(rstan)
library(pscl)
schools <- list(estimate = c(28, 8, -3, 7, -1, 1, 18, 12),
est_sd = c(15, 10, 16, 11, 9, 11, 10, 18),
name = c("A", "B", "C", "D", "E", "F", "G", "H"))
J <- length(school$estimate)
y <- schools$estimate
sigma <- schools$est_sd
theta_update <- function (){
theta_hat <- (mu/tau^2 + y/sigma^2)/(1/tau^2 + 1/sigma^2)
V_theta <- 1/(1/tau^2 + 1/sigma^2)
rnorm (J, theta_hat, sqrt(V_theta))
}
mu_update <- function (){
rnorm (1, mean(theta), tau/sqrt(J))
}
tau_update <- function (){
sqrt(rigamma(1, (J-1)/2, sum((theta-mu)^2)/2))
}
chains <- 5
iter <- 1000
sims <- array (NA, c(iter, chains, J+2))
dimnames (sims) <- list (NULL, NULL,
c (paste ("theta[", 1:8, "]", sep=""), "mu", "tau"))
for (m in 1:chains){
mu <- rnorm (1, mean(y), sd(y))
tau <- runif (1, 0, sd(y))
for (t in 1:iter){
theta <- theta_update ()
mu <- mu_update ()
tau <- tau_update ()
sims[t,m,] <- c (theta, mu, tau)
}
}
library(rstan)
library(pscl)
schools <- list(estimate = c(28, 8, -3, 7, -1, 1, 18, 12),
est_sd = c(15, 10, 16, 11, 9, 11, 10, 18),
name = c("A", "B", "C", "D", "E", "F", "G", "H"))
J <- length(schools$estimate)
y <- schools$estimate
sigma <- schools$est_sd
theta_update <- function (){
theta_hat <- (mu/tau^2 + y/sigma^2)/(1/tau^2 + 1/sigma^2)
V_theta <- 1/(1/tau^2 + 1/sigma^2)
rnorm (J, theta_hat, sqrt(V_theta))
}
mu_update <- function (){
rnorm (1, mean(theta), tau/sqrt(J))
}
tau_update <- function (){
sqrt(rigamma(1, (J-1)/2, sum((theta-mu)^2)/2))
}
chains <- 5
iter <- 1000
sims <- array (NA, c(iter, chains, J+2))
dimnames (sims) <- list (NULL, NULL,
c (paste ("theta[", 1:8, "]", sep=""), "mu", "tau"))
for (m in 1:chains){
mu <- rnorm (1, mean(y), sd(y))
tau <- runif (1, 0, sd(y))
for (t in 1:iter){
theta <- theta_update ()
mu <- mu_update ()
tau <- tau_update ()
sims[t,m,] <- c (theta, mu, tau)
}
}
sims
monitor(sims)
quantile(sims[, 1, 9], probs = c(.025, .975))
quantile(sims[, 2, 9], probs = c(.025, .975))
quantile(sims[, 3, 9], probs = c(.025, .975))
quantile(sims[, 4, 9], probs = c(.025, .975))
quantile(sims[, 5, 9], probs = c(.025, .975))
sim[, , 9]
sims[, , 9]
apply(sims[, , 9], 2, quantile, probs = c(.025, .975))
apply(apply(sims[, , 9], 2, quantile, probs = c(.025, .975)), 1, mean)
quantile(sims[, , 9], probs = c(.025, .975))
library(rstan)
library(pscl)
schools <- list(estimate = c(28, 8, -3, 7, -1, 1, 18, 12),
est_sd = c(15, 10, 16, 11, 9, 11, 10, 18),
name = c("A", "B", "C", "D", "E", "F", "G", "H"))
J <- length(schools$estimate)
y <- schools$estimate
sigma <- schools$est_sd
theta_update <- function (){
theta_hat <- (mu/tau^2 + y/sigma^2)/(1/tau^2 + 1/sigma^2)
V_theta <- 1/(1/tau^2 + 1/sigma^2)
rnorm (J, theta_hat, sqrt(V_theta))
}
mu_update <- function (){
rnorm (1, mean(theta), tau/sqrt(J))
}
tau_update <- function (){
sqrt(rigamma(1, (J-1)/2, sum((theta-mu)^2)/2))
}
chains <- 1
iter <- 1000
sims <- array (NA, c(iter, chains, J+2))
dimnames (sims) <- list (NULL, NULL,
c (paste ("theta[", 1:8, "]", sep=""), "mu", "tau"))
for (m in 1:chains){
mu <- rnorm (1, mean(y), sd(y))
tau <- runif (1, 0, sd(y))
for (t in 1:iter){
theta <- theta_update ()
mu <- mu_update ()
tau <- tau_update ()
sims[t,m,] <- c (theta, mu, tau)
}
}
monitor(sims)
library(rstan)
library(pscl)
schools <- list(estimate = c(28, 8, -3, 7, -1, 1, 18, 12),
est_sd = c(15, 10, 16, 11, 9, 11, 10, 18),
name = c("A", "B", "C", "D", "E", "F", "G", "H"))
J <- length(schools$estimate)
y <- schools$estimate
sigma <- schools$est_sd
theta_update <- function (){
theta_hat <- (mu/tau^2 + y/sigma^2)/(1/tau^2 + 1/sigma^2)
V_theta <- 1/(1/tau^2 + 1/sigma^2)
rnorm (J, theta_hat, sqrt(V_theta))
}
mu_update <- function (){
rnorm (1, mean(theta), tau/sqrt(J))
}
tau_update <- function (){
sqrt(rigamma(1, (J-1)/2, sum((theta-mu)^2)/2))
}
chains <- 5
iter <- 600
sims <- array (NA, c(iter, chains, J+2))
dimnames (sims) <- list (NULL, NULL,
c (paste ("theta[", 1:8, "]", sep=""), "mu", "tau"))
for (m in 1:chains){
mu <- rnorm (1, mean(y), sd(y))
tau <- runif (1, 0, sd(y))
for (t in 1:iter){
theta <- theta_update ()
mu <- mu_update ()
tau <- tau_update ()
sims[t,m,] <- c (theta, mu, tau)
}
}
monitor(sims)
library(rstan)
library(pscl)
schools <- list(estimate = c(28, 8, -3, 7, -1, 1, 18, 12),
est_sd = c(15, 10, 16, 11, 9, 11, 10, 18),
name = c("A", "B", "C", "D", "E", "F", "G", "H"))
J <- length(schools$estimate)
y <- schools$estimate
sigma <- schools$est_sd
theta_update <- function (){
theta_hat <- (mu/tau^2 + y/sigma^2)/(1/tau^2 + 1/sigma^2)
V_theta <- 1/(1/tau^2 + 1/sigma^2)
rnorm (J, theta_hat, sqrt(V_theta))
}
mu_update <- function (){
rnorm (1, mean(theta), tau/sqrt(J))
}
tau_update <- function (){
sqrt(rigamma(1, (J-1)/2, sum((theta-mu)^2)/2))
}
chains <- 5
iter <- 300
sims <- array (NA, c(iter, chains, J+2))
dimnames (sims) <- list (NULL, NULL,
c (paste ("theta[", 1:8, "]", sep=""), "mu", "tau"))
for (m in 1:chains){
mu <- rnorm (1, mean(y), sd(y))
tau <- runif (1, 0, sd(y))
for (t in 1:iter){
theta <- theta_update ()
mu <- mu_update ()
tau <- tau_update ()
sims[t,m,] <- c (theta, mu, tau)
}
}
monitor(sims)
library(rstan)
library(pscl)
schools <- list(estimate = c(28, 8, -3, 7, -1, 1, 18, 12),
est_sd = c(15, 10, 16, 11, 9, 11, 10, 18),
name = c("A", "B", "C", "D", "E", "F", "G", "H"))
J <- length(schools$estimate)
y <- schools$estimate
sigma <- schools$est_sd
theta_update <- function (){
theta_hat <- (mu/tau^2 + y/sigma^2)/(1/tau^2 + 1/sigma^2)
V_theta <- 1/(1/tau^2 + 1/sigma^2)
rnorm (J, theta_hat, sqrt(V_theta))
}
mu_update <- function (){
rnorm (1, mean(theta), tau/sqrt(J))
}
tau_update <- function (){
sqrt(rigamma(1, (J-1)/2, sum((theta-mu)^2)/2))
}
chains <- 5
iter <- 100
sims <- array (NA, c(iter, chains, J+2))
dimnames (sims) <- list (NULL, NULL,
c (paste ("theta[", 1:8, "]", sep=""), "mu", "tau"))
for (m in 1:chains){
mu <- rnorm (1, mean(y), sd(y))
tau <- runif (1, 0, sd(y))
for (t in 1:iter){
theta <- theta_update ()
mu <- mu_update ()
tau <- tau_update ()
sims[t,m,] <- c (theta, mu, tau)
}
}
monitor(sims)
library(rstan)
library(pscl)
schools <- list(estimate = c(28, 8, -3, 7, -1, 1, 18, 12),
est_sd = c(15, 10, 16, 11, 9, 11, 10, 18),
name = c("A", "B", "C", "D", "E", "F", "G", "H"))
J <- length(schools$estimate)
y <- schools$estimate
sigma <- schools$est_sd
theta_update <- function (){
theta_hat <- (mu/tau^2 + y/sigma^2)/(1/tau^2 + 1/sigma^2)
V_theta <- 1/(1/tau^2 + 1/sigma^2)
rnorm (J, theta_hat, sqrt(V_theta))
}
mu_update <- function (){
rnorm (1, mean(theta), tau/sqrt(J))
}
tau_update <- function (){
sqrt(rigamma(1, (J-1)/2, sum((theta-mu)^2)/2))
}
chains <- 5
iter <- 10
sims <- array (NA, c(iter, chains, J+2))
dimnames (sims) <- list (NULL, NULL,
c (paste ("theta[", 1:8, "]", sep=""), "mu", "tau"))
for (m in 1:chains){
mu <- rnorm (1, mean(y), sd(y))
tau <- runif (1, 0, sd(y))
for (t in 1:iter){
theta <- theta_update ()
mu <- mu_update ()
tau <- tau_update ()
sims[t,m,] <- c (theta, mu, tau)
}
}
monitor(sims)
library(rstan)
library(pscl)
schools <- list(estimate = c(28, 8, -3, 7, -1, 1, 18, 12),
est_sd = c(15, 10, 16, 11, 9, 11, 10, 18),
name = c("A", "B", "C", "D", "E", "F", "G", "H"))
J <- length(schools$estimate)
y <- schools$estimate
sigma <- schools$est_sd
theta_update <- function (){
theta_hat <- (mu/tau^2 + y/sigma^2)/(1/tau^2 + 1/sigma^2)
V_theta <- 1/(1/tau^2 + 1/sigma^2)
rnorm (J, theta_hat, sqrt(V_theta))
}
mu_update <- function (){
rnorm (1, mean(theta), tau/sqrt(J))
}
tau_update <- function (){
sqrt(rigamma(1, (J-1)/2, sum((theta-mu)^2)/2))
}
chains <- 5
iter <- 1000
sims <- array (NA, c(iter, chains, J+2))
dimnames (sims) <- list (NULL, NULL,
c (paste ("theta[", 1:8, "]", sep=""), "mu", "tau"))
for (m in 1:chains){
mu <- rnorm (1, mean(y), sd(y))
tau <- runif (1, 0, sd(y))
for (t in 1:iter){
theta <- theta_update ()
mu <- mu_update ()
tau <- tau_update ()
sims[t,m,] <- c (theta, mu, tau)
}
}
library(rstan)
library(pscl)
schools <- list(estimate = c(28, 8, -3, 7, -1, 1, 18, 12),
est_sd = c(15, 10, 16, 11, 9, 11, 10, 18),
name = c("A", "B", "C", "D", "E", "F", "G", "H"))
J <- length(schools$estimate)
y <- schools$estimate
sigma <- schools$est_sd
theta_update <- function (){
theta_hat <- (mu/tau^2 + y/sigma^2)/(1/tau^2 + 1/sigma^2)
V_theta <- 1/(1/tau^2 + 1/sigma^2)
rnorm (J, theta_hat, sqrt(V_theta))
}
mu_update <- function (){
rnorm (1, mean(theta), tau/sqrt(J))
}
tau_update <- function (){
sqrt(rigamma(1, (J-1)/2, sum((theta-mu)^2)/2))
}
chains <- 5
iter <- 1000
sims <- array (NA, c(iter, chains, J+2))
dimnames (sims) <- list (NULL, NULL,
c (paste ("theta[", 1:8, "]", sep=""), "mu", "tau"))
for (m in 1:chains){
mu <- rnorm (1, mean(y), sd(y))
tau <- runif (1, 0, sd(y))
for (t in 1:iter){
theta <- theta_update ()
mu <- mu_update ()
tau <- tau_update ()
sims[t,m,] <- c (theta, mu, tau)
}
}
monitor(sims)
hist(sims[, 1, 10])
hist(sims[, 2, 10])
hist(sims[, 3, 10])
hist(sims[, 4, 10])
hist(sims[, 5, 10])
hist(sims[, 5, 1])
?pushViewport
?labs
p_mu <- ggplot(aes(x = sims[501:1000, 1, 9]))
p_mu + geom_histogram() + stat_density()
p_mu <- ggplot(data = NULL, mapping = aes(x = sims[501:1000, 1, 9]))
p_mu + geom_histogram() + stat_density()
p_mu +stat_density()
?stat_density
p_mu + geom_histogram() + stat_density(geom = "lines")
p_mu + stat_density(geom = "line")
?geom_histogram
p_mu + geom_histogram(mapping = aes(y = ..count../sum(..count..))) + stat_density(geom = "line")
?stat_density
p_mu <- ggplot(data = NULL, mapping = aes(x = sims[501:1000, 1, 9]))
p_mu + geom_histogram(mapping = aes(y = ..count../sum(..count..)),
alpha = 0.2,
fill = "blue") +
stat_density(geom = "line")
p_mu <- ggplot(data = NULL, mapping = aes(x = sims[501:1000, 1, 9]))
p_mu + geom_histogram(mapping = aes(y = ..count../sum(..count..)),
alpha = 0.2,
fill = "blue") +
stat_density(geom = "line",
fill = "red")
p_mu <- ggplot(data = NULL, mapping = aes(x = sims[501:1000, 1, 9]))
p_mu + geom_histogram(mapping = aes(y = ..count../sum(..count..)),
alpha = 0.2,
fill = "blue") +
stat_density(geom = "line",
colour = "red")
p_mu <- ggplot(data = NULL, mapping = aes(x = sims[501:1000, 1, 9]))
p_mu + geom_histogram(mapping = aes(y = ..count../sum(..count..)),
alpha = 0.2,
fill = "blue") +
stat_density(geom = "line",
size = 2)
p_mu <- ggplot(data = NULL, mapping = aes(x = sims[501:1000, 1, 9]))
p_mu + geom_histogram(mapping = aes(y = ..count../sum(..count..)),
alpha = 0.2,
fill = "blue") +
stat_density(geom = "line",
size = 1)
mu <- seq(-10, 30, length = 5000)
dens <- dnorm(mu, mean = 7.8, sd = 5.3)
p_mu <- ggplot(data = NULL, mapping = aes(x = sims[501:1000, 1, 9]))
p_mu + geom_histogram(mapping = aes(y = ..count../sum(..count..)),
alpha = 0.2,
fill = "blue") +
geom_line(mapping = aes(x = mu, y = dens))
plot(mu, dens)
dnorm(7.8, 7.8, 5.3)
?geom_line
mu <- seq(-10, 30, length = 5000)
dens <- dnorm(mu, mean = 7.8, sd = 5.3)
p_mu <- ggplot(data = NULL, mapping = aes(x = sims[501:1000, 1, 9]))
p_mu + geom_histogram(mapping = aes(y = .5 * ..count../sum(..count..)),
alpha = 0.2,
fill = "blue") +
geom_line(mapping = aes(x = mu, y = dens)) +
labs(list(x = "Mu", y = "Density", title = "Estimate Posterior Distribution"))
mu <- seq(-10, 30, length = 5000)
dens <- dnorm(mu, mean = 7.8, sd = 5.3)
p_mu <- ggplot(data = NULL, mapping = aes(x = sims[501:1000, 1, 9]))
p_mu + geom_histogram(mapping = aes(y = .6 * ..count../sum(..count..)),
alpha = 0.2,
fill = "blue",
binwidth = 1) +
geom_line(mapping = aes(x = mu, y = dens)) +
labs(list(x = "Mu", y = "Density", title = "Estimate Posterior Distribution"))
mu <- seq(-10, 30, length = 5000)
dens <- dnorm(mu, mean = 7.8, sd = 5.3)
p_mu <- ggplot(data = NULL, mapping = aes(x = sims[501:1000, 1, 9]))
p_mu + geom_histogram(mapping = aes(y = .8 * ..count../sum(..count..)),
alpha = 0.2,
fill = "blue",
binwidth = 1) +
geom_line(mapping = aes(x = mu, y = dens)) +
labs(list(x = "Mu", y = "Density", title = "Estimate Posterior Distribution"))
sapply(sims[501:1000, 1, 2:8], max)
apply(sims[501:1000, 1, 2:8], 1, max)
(sims[501:1000, 1, 1] - apply(sims[501:1000, 1, 2:8], 1, max))
mean((sims[501:1000, 1, 1] - apply(sims[501:1000, 1, 2:8], 1, max)) > 0)
install.packages("ff")
getwd()
output <- matrix(numeric(1000*50), ncol = 50)
for (i in 1:1000){
output(i, ) <- sample(1:6, 50, replace = TRUE)
}
for (i in 1:1000){
output(i, ) <- sample(1:6, 50, replace = TRUE)
}
for (i in 1:1000){
output[i, ] <- sample(1:6, 50, replace = TRUE)
}
output
mu <- apply(output, 1, mean)
mu
mean(mu)
sd(mu)
35/12
35/12/50
sqrt(35/12/50)
quantile(mu, probs = c(.025, .975))
mean(mu)-1.96*sqrt(35/12/50)
mean(mu)+1.96*sqrt(35/12/50)
setwd("~/Box Sync/Speckmans assignment")
library(penalized)
?cvl
matrix(rnorm(100), nrow = 10)
dat <- matrix(rnorm(100), nrow = 10)
dat <- matrix(sample(c(0, 1), 100, replact = TRUE), nrow = 10)
dat <- matrix(sample(c(0, 1), 100, replace = TRUE), nrow = 10)
data
dat
dat != t(dat)
sum(dat != t(dat))/
2
setwd("~/Documents/git/DataAnalysis3")
